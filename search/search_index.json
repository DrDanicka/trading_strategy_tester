{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Trading Strategy Tester","text":"<p>Welcome to the documentation for the Trading Strategy Tester. This project is designed to help you test and evaluate trading strategies using historical data. The goal is to provide a comprehensive framework that allows you to simulate trades, analyze performance, and optimize strategies.</p> <p>One of the main features of this project is the integration with Large Language Models (LLMs) to assist in generating and optimizing trading strategies. By leveraging the power of LLMs, users can create the strategies more efficiently and effectively. The project also includes a user-friendly interface for visualizing results and performance metrics.</p> <p>Here you can find the documentation for the Python package. The documentation is organized into two sections:</p> <ul> <li>Developer Documentation</li> <li>User Documentation</li> </ul>"},{"location":"dev/","title":"Developer Documentation","text":"<p>Welcome to the Developer Documentation for the Trading Strategy Tester.</p> <p>This section is intended for contributors, maintainers, or anyone interested in the internal workings of the project. Here you'll find detailed explanations of the architecture, core modules, and guidelines on how to extend or integrate the system.</p>"},{"location":"dev/#project-structure","title":"Project Structure","text":"<p>The project is organized into the following key modules:</p> <ul> <li><code>download</code>: Handles downloading and managing historical market data.</li> <li><code>strategy</code>: Defines trading strategies and how they execute trades.</li> <li><code>conditions</code>: Contains logic for entry and exit conditions used in strategies.</li> <li><code>trading_series</code>: Manages time series data used during backtesting.</li> <li><code>trading_plot</code>: Provides tools for visualizing trading performance and signals.</li> <li><code>indicators</code>: Implements technical indicators commonly used in strategies.</li> <li><code>trade</code>: Represents individual trades and their properties.</li> <li><code>statistics</code>: Calculates performance metrics such as profit, drawdown, win rate, etc.</li> </ul>"},{"location":"dev/#large-language-model-llm-integration","title":"Large Language Model (LLM) Integration","text":"<p>The project integrates with Large Language Models (LLMs) to help generate and optimize trading strategies from natural language descriptions.</p> <p>Two main techniques are used:</p>"},{"location":"dev/#fine-tuning","title":"Fine-tuning","text":"<p>Fine-tuning involves taking a pre-trained model and training it further on a custom dataset. This allows the model to specialize in interpreting and generating trading strategy code.</p> <p>The dataset consists of natural language strategy descriptions paired with their code implementations. It is created using the <code>training_dataset</code> module.</p>"},{"location":"dev/#retrieval-augmented-generation-rag","title":"Retrieval-Augmented Generation (RAG)","text":"<p>RAG enhances language model outputs by retrieving relevant information from a knowledge base during generation. In this project, RAG is used to inject context (e.g., existing strategy documentation or indicator definitions) into the LLM\u2019s response.</p> <p>The knowledge base is generated from the project\u2019s internal documentation and strategy schema.</p>"},{"location":"dev/testing/","title":"Testing Overview","text":"<p>The Trading Strategy Tester project places a strong emphasis on code quality and reliability. Comprehensive testing has been conducted to ensure that the system behaves as expected across a wide range of scenarios.</p>"},{"location":"dev/testing/#test-coverage","title":"Test Coverage","text":"<ul> <li>Total Unit Tests: Approximately 600</li> <li>Lines of Code Covered: 86%</li> </ul> <p>This extensive test suite covers the core logic, including: - Trade execution and management - Strategy validation and evaluation - Indicator calculations and TradingSeries implementations   - Indicator values are tested against TradingView values available on the website. - Performance metrics calculations - Training data generation for LLMs - Input validation modules</p>"},{"location":"dev/testing/#notes-on-coverage","title":"Notes on Coverage","text":"<p>While an 86% coverage rate demonstrates a high level of confidence in the system's correctness, achieving 100% coverage is not practical or necessary for this project. Some areas intentionally remain uncovered, particularly:</p> <ul> <li>Visualization modules: Functions related to plotting and graphical representation are harder to unit test due to their reliance on external libraries and graphical outputs.</li> </ul>"},{"location":"dev/testing/#conclusion","title":"Conclusion","text":"<p>The testing strategy balances thoroughness with practicality, ensuring that the critical business logic is rigorously tested while recognizing that some visual and auxiliary components are better validated through manual inspection or integration testing.</p> <p>Thanks to this strong testing foundation, the Trading Strategy Tester is robust, maintainable, and ready for extension and real-world usage.</p>"},{"location":"dev/modules/download/","title":"<code>DownloadModule</code> \u2014 Financial Data Download Module","text":"<p>The <code>DownloadModule</code> provides a flexible and configurable way to download and cache historical market data using the Yahoo Finance API via the <code>yfinance</code> library. It supports both time-window (<code>start_date</code> to <code>end_date</code>) and period-based downloads and ensures data is reused from disk when available.</p>"},{"location":"dev/modules/download/#class-downloadmodule","title":"Class: <code>DownloadModule</code>","text":""},{"location":"dev/modules/download/#constructor","title":"Constructor","text":"<pre><code>DownloadModule(\n    start_date: datetime = datetime(2024, 1, 1),\n    end_date: datetime = datetime.today(),\n    interval: Interval = Interval.ONE_DAY,\n    period: Period = Period.NOT_PASSED\n)\n</code></pre> <p>Parameters: - <code>start_date</code>: Start date for data download (used if <code>period</code> is <code>NOT_PASSED</code>) - <code>end_date</code>: End date for data download - <code>interval</code>: Granularity of data. Supported intervals are linked here. - <code>period</code>: Predefined period. Period has higher priority than <code>start_date</code> and <code>end_date</code>. So if not <code>NOT_PASSED</code>, it will be used for the download. Supported periods are linked here.</p>"},{"location":"dev/modules/download/#methods","title":"Methods","text":""},{"location":"dev/modules/download/#download_save_and_return_tickerticker-str-filepath-str-datetime_type-str-pddataframe","title":"<code>download_save_and_return_ticker(ticker: str, filepath: str, datetime_type: str) -&gt; pd.DataFrame</code>","text":"<p>Downloads market data for the given <code>ticker</code> using the specified date method, saves it as a CSV, and returns it as a <code>DataFrame</code>.</p>"},{"location":"dev/modules/download/#return_cached_or_download_dateticker-str-pddataframe","title":"<code>return_cached_or_download_date(ticker: str) -&gt; pd.DataFrame</code>","text":"<p>Returns cached data if exists, otherwise downloads it using the date range from <code>start_date</code> to <code>end_date</code>.</p> <p>File is cached at:</p> <pre><code>_data/{ticker}_{start_date}_{end_date}_{interval}.csv\n</code></pre>"},{"location":"dev/modules/download/#return_cached_or_download_periodticker-str-pddataframe","title":"<code>return_cached_or_download_period(ticker: str) -&gt; pd.DataFrame</code>","text":"<p>Returns cached data if available or downloads data using the predefined <code>period</code>.</p> <p>File is cached at:</p> <pre><code>_data/{ticker}_{period}_{interval}.csv\n</code></pre>"},{"location":"dev/modules/download/#download_tickerticker-str-pddataframe","title":"<code>download_ticker(ticker: str) -&gt; pd.DataFrame</code>","text":"<p>High-level function that automatically determines whether to download by period or by date, based on the <code>period</code> setting.</p>"},{"location":"dev/modules/download/#caching-behavior","title":"Caching Behavior","text":"<ul> <li>Cached files are stored under a <code>_data/</code> directory inside the module path</li> <li>Prevents redundant downloads for the same ticker during a strategy execution run</li> <li>Uses descriptive filenames based on ticker and parameters</li> </ul>"},{"location":"dev/modules/indicators/","title":"<code>indicators</code> \u2014 Technical Indicators Module","text":"<p>This module contains categorized implementations of technical indicators used across trading strategies. These indicators are grouped into submodules by type: momentum, trend, volatility, overlap, volume, and candlestick patterns.</p> <p>Every indicator is implemented as a function that takes a Pandas Series and some parameters needed for particular indicator and every function returns a Pandas Series with the same length as the input series. The returned series contains the calculated values of the indicator for each corresponding value in the input series.</p>"},{"location":"dev/modules/indicators/#module-structure","title":"Module Structure","text":""},{"location":"dev/modules/indicators/#1-momentum-indicators","title":"1. Momentum Indicators","text":"<p>Located in <code>trading_strategy_tester/indicators/momentum/</code></p> <ul> <li><code>willr.py</code> \u2014 Williams %R</li> <li><code>macd.py</code> \u2014 Moving Average Convergence Divergence</li> <li><code>cmo.py</code> \u2014 Chande Momentum Oscillator</li> <li><code>roc.py</code> \u2014 Rate of Change</li> <li><code>bbp.py</code> \u2014 Bull and Bear Power</li> <li><code>cci.py</code> \u2014 Commodity Channel Index</li> <li><code>uo.py</code> \u2014 Ultimate Oscillator</li> <li><code>stoch.py</code> \u2014 Stochastic %K and %D Indicators</li> <li><code>cop.py</code> \u2014 Coppock Curve</li> <li><code>rsi.py</code> \u2014 Relative Strength Index</li> <li><code>trix.py</code> \u2014 Triple Exponential Average</li> <li><code>momentum.py</code> \u2014 Momentum</li> <li><code>kst.py</code> \u2014 Know Sure Thing</li> <li><code>dmi.py</code> \u2014 Directional Movement Index</li> </ul>"},{"location":"dev/modules/indicators/#2-trend-indicators","title":"2. Trend Indicators","text":"<p>Located in <code>trading_strategy_tester/indicators/trend/</code></p> <ul> <li><code>mass.py</code> \u2014 Mass Index</li> <li><code>adx.py</code> \u2014 Average Directional Index</li> <li><code>aroon.py</code> \u2014 Aroon Up and Down Indicators</li> <li><code>dpo.py</code> \u2014 Detrended Price Oscillator</li> </ul>"},{"location":"dev/modules/indicators/#3-volatility-indicators","title":"3. Volatility Indicators","text":"<p>Located in <code>trading_strategy_tester/indicators/volatility/</code></p> <ul> <li><code>dc.py</code> \u2014 Donchian Channels</li> <li><code>bb.py</code> \u2014 Bollinger Bands</li> <li><code>atr.py</code> \u2014 Average True Range</li> <li><code>chop.py</code> \u2014 Choppiness Index</li> <li><code>kc.py</code> \u2014 Keltner Channels</li> </ul>"},{"location":"dev/modules/indicators/#4-overlap-indicators","title":"4. Overlap Indicators","text":"<p>Located in <code>trading_strategy_tester/indicators/overlap/</code></p> <ul> <li><code>ema.py</code> \u2014 Exponential Moving Average</li> <li><code>sma.py</code> \u2014 Simple Moving Average</li> <li><code>ichimoku.py</code> \u2014 Ichimoku Cloud components</li> </ul>"},{"location":"dev/modules/indicators/#5-volume-based-indicators","title":"5. Volume-Based Indicators","text":"<p>Located in <code>trading_strategy_tester/indicators/volume/</code></p> <ul> <li><code>pvt.py</code> \u2014 Price Volume Trend</li> <li><code>efi.py</code> \u2014 Elder Force Index</li> <li><code>pvi.py</code> \u2014 Positive Volume Index</li> <li><code>mfi.py</code> \u2014 Money Flow Index</li> <li><code>obv.py</code> \u2014 On Balance Volume</li> <li><code>eom.py</code> \u2014 Ease of Movement</li> <li><code>chaikin_osc.py</code> \u2014 Chaikin Oscillator</li> <li><code>cmf.py</code> \u2014 Chaikin Money Flow</li> </ul>"},{"location":"dev/modules/indicators/#6-candlestick-patterns","title":"6. Candlestick Patterns","text":"<p>Located in <code>trading_strategy_tester/indicators/candlestick_patterns/</code></p> <ul> <li><code>hammer.py</code> \u2014 Hammer Pattern</li> </ul>"},{"location":"dev/modules/statistics/","title":"<code>Statistics</code> \u2014 Strategy Performance Metrics Calculation","text":"<p>The <code>get_strategy_stats</code> function calculates key performance statistics for a trading strategy based on a list of executed trades and historical market data.</p>"},{"location":"dev/modules/statistics/#function-signature","title":"Function Signature","text":"<pre><code>get_strategy_stats(\n    trades: list[Trade],\n    df: pd.DataFrame,\n    initial_capital: float,\n    order_size: OrderSize\n) -&gt; dict\n</code></pre>"},{"location":"dev/modules/statistics/#parameters","title":"Parameters","text":"<ul> <li> <p><code>trades</code> (<code>list[Trade]</code>):   List of executed <code>Trade</code> objects, each representing a simulated trade.</p> </li> <li> <p><code>df</code> (<code>pd.DataFrame</code>):   Market data used to calculate additional metrics like Buy-and-Hold returns.</p> </li> <li> <p><code>initial_capital</code> (<code>float</code>):   The amount of starting capital at the beginning of the backtest.</p> </li> <li> <p><code>order_size</code> (<code>OrderSize</code>):   The method for determining position sizing across trades. Supported OrderSizes are linked here</p> </li> </ul>"},{"location":"dev/modules/statistics/#returned-statistics","title":"Returned Statistics","text":"<p>The function returns a dictionary with the following metrics:</p> Metric Description Units <code>Net Profit</code> Total profit or loss from all trades Dollars ($) <code>Gross Profit</code> Total profits from winning trades only Dollars ($) <code>Gross Loss</code> Total losses from losing trades only Dollars ($) <code>Profit factor</code> Ratio of Gross Profit to Gross Loss Unitless <code>Sharpe Ratio</code> Risk-adjusted return based on trade P&amp;L Unitless <code>Max Drawdown</code> Maximum observed loss from a peak to a trough Dollars ($) <code>Buy and Hold Return</code> Profit/loss if simply holding from start to end Dollars ($) <code>Buy and Hold Return Percentage</code> Buy-and-hold return as a percent Percentage (%) <code>Commissions Paid</code> Total commissions across all trades Dollars ($) <code>Total Trades</code> Total number of trades executed Count <code>Number of Winning Trades</code> Number of profitable trades Count <code>Number of Losing Trades</code> Number of losing trades Count <code>Average Trade</code> Average P&amp;L per trade Dollars ($) <code>Largest Winning Trade</code> Largest single winning trade Dollars ($) <code>Largest Losing Trade</code> Largest single losing trade Dollars ($) <code>P&amp;L</code> Total profit and loss Dollars ($) <code>P&amp;L Percentage</code> Total profit and loss relative to initial capital Percentage (%)"},{"location":"dev/modules/statistics/#notes","title":"Notes","text":"<ul> <li>Sharpe Ratio is computed based on trade-level returns, not daily returns.</li> <li>Commissions are subtracted from each trade's result when calculating final stats.</li> <li>If fewer than two trades exist, or trade P&amp;L has zero standard deviation, Sharpe Ratio will be shown as <code>-</code>.</li> <li>Profit Factor is shown as <code>-</code> if there were no losses (gross loss = 0).</li> </ul>"},{"location":"dev/modules/strategy/","title":"<code>Strategy</code> \u2014 Trading Strategy Definition","text":"<p>The <code>Strategy</code> class defines a complete trading strategy, including entry and exit conditions, position type, optional stop loss and take profit logic, and other execution parameters. It integrates with the trading engine to simulate and evaluate strategies over historical data.</p>"},{"location":"dev/modules/strategy/#class-strategy","title":"Class: <code>Strategy</code>","text":"<pre><code>Strategy(\n    ticker: str,\n    position_type: PositionTypeEnum,\n    buy_condition: Condition,\n    sell_condition: Condition,\n    stop_loss: Optional[StopLoss] = None,\n    take_profit: Optional[TakeProfit] = None,\n    start_date: datetime = None,\n    end_date: datetime = None,\n    interval: Interval = Interval.ONE_DAY,\n    period: Period = Period.NOT_PASSED,\n    initial_capital: float = 1_000_000,\n    order_size: OrderSize = Contracts(value=1),\n    trade_commissions: TradeCommissions = MoneyCommissions(0.0)\n)\n</code></pre>"},{"location":"dev/modules/strategy/#parameters","title":"Parameters","text":"<ul> <li><code>ticker</code>: The symbol of the financial instrument to trade (e.g., <code>\"AAPL\"</code>). It is used for downloading historical data. It supports all symbols that are supported in <code>yfinance</code>.</li> <li><code>position_type</code>: Defines the type of position to take when trading. Supported types of trades are linked here.</li> <li><code>buy_condition</code>: The condition under which the strategy should enter a trade.</li> <li><code>sell_condition</code>: The condition under which the strategy should exit a trade. To learn more about conditions, check the conditions module.</li> <li><code>stop_loss</code>: Optional stop-loss logic for risk management. See the stop loss module for more details.</li> <li><code>take_profit</code>: Optional profit-taking logic. See the take profit module for more details.</li> <li><code>start_date</code>, <code>end_date</code>: Range of time over which to test the strategy (ignored if <code>period</code> is used).</li> <li><code>interval</code>: Data resolution. Supported intervals are linked here.</li> <li><code>period</code>: Time period on which the strategy should be tested. Supported periods are linked here. This has higher priority than <code>start_date</code> and <code>end_date</code>.</li> <li><code>initial_capital</code>: Starting balance for trade simulation.</li> <li><code>order_size</code>: Defines how much to allocate per trade. OrderSize module is defined here.</li> <li><code>trade_commissions</code>: Commission model to apply to trades. Supported commission models are linked here.</li> </ul>"},{"location":"dev/modules/strategy/#methods","title":"Methods","text":""},{"location":"dev/modules/strategy/#execute-pddataframe","title":"<code>execute() -&gt; pd.DataFrame</code>","text":"<p>Executes the trading strategy by generating trades based on buy/sell conditions, order size, and available capital. Applies stop loss / take profit logic where defined. It also calculates the performance metrics of the strategy and creates graphs for visualizing the results.</p> <p>Returns a DataFrame in which there are historical price data for the ticker, used technical indicators calculated by the strategy, and signals generated by the strategy.</p> <p>Then there is a series of three methods that are used to get data from the strategy. Those are </p>"},{"location":"dev/modules/strategy/#get_trades-dict-get_graphs-dict-and-get_statistics-dict","title":"<code>get_trades() -&gt; dict</code>, <code>get_graphs() -&gt; dict</code>, and <code>get_statistics() -&gt; dict</code>","text":"<p>These methods return the trades, graphs, and statistics generated by the strategy execution. Each method returns a dictionary containing relevant data.</p>"},{"location":"dev/modules/strategy/#to_dict-dict","title":"<code>to_dict() -&gt; dict</code>","text":"<p>Lastly there is a serialization method that converts the strategy object into a dictionary format. This is used for testing and comparing strategies generated by the LLM.</p>"},{"location":"dev/modules/trade/","title":"<code>Trade</code> Module","text":"<p>The <code>trade</code> module works as a summary of a single trade, including entry and exit details, trade size, and commission effects. It is designed to have all the necessary information to calculate the profit or loss of a trade.</p>"},{"location":"dev/modules/trade/#trade-class","title":"<code>Trade</code> Class","text":"<p>The <code>Trade</code> class encapsulates the execution of a single trade, including entry and exit details, trade size, and commission effects.</p>"},{"location":"dev/modules/trade/#parameters-constructor","title":"Parameters (Constructor)","text":"<pre><code>Trade(\n    df_slice: pd.DataFrame,\n    trade_id: int,\n    order_size: OrderSize,\n    current_capital: float,\n    initial_capital: float,\n    trade_commissions: TradeCommissions,\n    long: bool = True\n)\n</code></pre> <ul> <li> <p><code>df_slice</code> (<code>pd.DataFrame</code>):   DataFrame slice containing the data for the trade. This is typically a subset of the historical data used for backtesting.</p> </li> <li> <p><code>trade_id</code> (<code>int</code>):   Unique identifier for the trade. This is used to track the trade throughout the backtesting process.</p> </li> <li> <p><code>order_size</code> (<code>OrderSize</code>):   Object defining how much capital is allocated to the trade. Supported order sizes are linked here.</p> </li> <li> <p><code>current_capital</code> (<code>float</code>):   Current capital available for trading. This is updated as trades are executed.</p> </li> <li> <p><code>initial_capital</code> (<code>float</code>):   Capital available when the trade was initiated.</p> </li> <li> <p><code>trade_commissions</code> (<code>TradeCommissions</code>):   Object describing commissions applied to each trade. Supported commission types are linked here.</p> </li> <li> <p><code>long</code> (<code>bool</code>):   Indicates whether the trade is a long position. Default is <code>True</code>. If <code>False</code>, the trade is considered a short position.</p> </li> </ul> <p>Trade objects are returned in a list as a result of the <code>Strategy</code> class. The list contains all trades executed during the backtest.</p>"},{"location":"dev/modules/trading_plot/","title":"<code>TradingPlot</code> \u2014 Visualizing Trading Conditions Module","text":"<p>The <code>trading_plot</code> module defines an extensible interface for visualizing the behavior of trading conditions over time using <code>Plotly</code>. Each condition in your strategy can return a <code>TradingPlot</code> object to represent relevant market signals graphically.</p>"},{"location":"dev/modules/trading_plot/#abstract-base-tradingplot","title":"Abstract Base: <code>TradingPlot</code>","text":"<pre><code>class TradingPlot(ABC):\n\n    @abstractmethod\n    def get_plot(self, dark: bool) -&gt; go.Figure:\n        pass\n\n    @abstractmethod\n    def shift(self, days_to_shift: int):\n        pass\n\n    def show_plot(self, dark: bool):\n        ...\n</code></pre>"},{"location":"dev/modules/trading_plot/#description","title":"Description","text":"<p>This abstract base class provides a consistent interface for all condition-related visual plots: - <code>get_plot(dark: bool)</code> \u2192 Required: Generates the actual Plotly figure. - <code>shift(days_to_shift: int)</code> \u2192 Required: Allows time-based adjustment of plot data. - <code>show_plot(dark: bool)</code> \u2192 Default: Displays the generated plot with a clean, user-friendly layout.</p>"},{"location":"dev/modules/trading_plot/#module-structure","title":"Module Structure","text":"<p>The module includes specialized subclasses for various trading conditions:</p> File Condition Visualization <code>cross_over_plot.py</code> CrossOverCondition <code>cross_under_plot.py</code> CrossUnderCondition <code>greater_than_plot.py</code> GreaterThanCondition <code>less_than_plot.py</code> LessThanCondition <code>downtrend_plot.py</code> DowntrendForXDaysCondition <code>uptrend_plot.py</code> UptrendForXDaysCondition <code>change_of_x_percent_per_y_days_plot.py</code> ChangeOfXPercentPerYDaysCondition and IntraIntervalChangeOfXPercentCondition <code>price_plot.py</code> Generic price visualization <p>Logical conditions (<code>AND</code>, <code>OR</code>) and <code>AfterXDaysCondition</code> are not visualized directly but they populate the <code>TradingPlot</code> objects of their child conditions.</p> <p>Every strategy returns a dictionary of <code>TradingPlot</code> objects, which can be accessed via the <code>get_graphs</code> method of the condition. The dictionary keys are: <code>PRICE</code>, <code>BUY</code>, and <code>SELL</code>. </p>"},{"location":"dev/modules/trading_series/","title":"<code>TradingSeries</code> \u2014 Series for Trading Strategies Module","text":"<p>The <code>TradingSeries</code> module provides a broad collection of classes that represent various financial indicators, price points, candlestick patterns, and volume-based signals. These series can be used inside conditions to define complex trading strategies.</p> <p>Most of the <code>TradingSeries</code> build upon the indicators from indicators module, but they are designed to be used in conditions with other <code>TradingSeries</code> classes.</p> <p>All <code>TradingSeries</code> classes inherit from the abstract base class <code>TradingSeries</code>, which defines a consistent interface for calculating and serializing the series.</p>"},{"location":"dev/modules/trading_series/#abstract-base-tradingseries","title":"Abstract Base: <code>TradingSeries</code>","text":"<p>All trading series inherit from this abstract class, ensuring a consistent interface for indicator calculation.</p> <pre><code>class TradingSeries(ABC):\n    def __init__(self, ticker: str):\n        self._ticker = ticker  # Store the ticker symbol as a protected attribute\n\n    @property\n    @abstractmethod\n    def ticker(self) -&gt; str:\n        pass\n\n    @abstractmethod\n    def get_data(self, downloader: DownloadModule, df: pd.DataFrame) -&gt; pd.Series:\n        pass\n\n    @abstractmethod\n    def get_name(self) -&gt; str:\n        pass\n\n    @abstractmethod\n    def to_dict(self) -&gt; dict:\n        pass\n</code></pre> <ul> <li><code>ticker() -&gt; str</code>: Returns the ticker symbol associated with the series.</li> <li><code>get_data(downloader: DownloadModule, df: pd.DataFrame) -&gt; pd.Series</code>: Fetches the data for the series using the provided downloader and DataFrame.</li> <li><code>get_name() -&gt; str</code>: Returns a human-readable name of the series.</li> <li><code>to_dict() -&gt; dict</code>: Serializes the series into a dictionary for testing purposes.</li> </ul>"},{"location":"dev/modules/trading_series/#available-trading-series","title":"Available Trading Series","text":"<p>Below is a complete list of all implemented TradingSeries classes in alphabetical order. There is a link for each class to its documentation, which includes a description of the class and its parameters</p> <ul> <li><code>ADX</code> - Average Directional Index Trading Series</li> <li><code>AROON_DOWN</code> - Aroon Down Trading Series</li> <li><code>AROON_UP</code> - Aroon Up Trading Series</li> <li><code>ATR</code> - Average True Range Trading Series</li> <li><code>BBP</code> - Bull and Bear Power Trading Series</li> <li><code>BB_LOWER</code> - Bollinger Bands Lower Band Trading Series</li> <li><code>BB_MIDDLE</code> - Bollinger Bands Middle Band Trading Series</li> <li><code>BB_UPPER</code> - Bollinger Bands Upper Band Trading Series</li> <li><code>CCI</code> - Commodity Channel Index Trading Series</li> <li><code>CCI_SMOOTHENED</code> - Smoothed Commodity Channel Index Trading Series</li> <li><code>CHAIKIN_OSC</code> - Chaikin Oscillator Trading Series</li> <li><code>CHOP</code> - Choppiness Index Trading Series</li> <li><code>CLOSE</code> - Closing Price Trading Series</li> <li><code>CMF</code> - Chaikin Money Flow Trading Series</li> <li><code>CMO</code> - Chande Momentum Oscillator Trading Series</li> <li><code>CONST</code> - Constant Value Trading Series</li> <li><code>COPPOCK</code> - Coppock Curve Trading Series</li> <li><code>DC_BASIS</code> - Donchian Channel Basis Trading Series</li> <li><code>DC_LOWER</code> - Donchian Channel Lower Band Trading Series</li> <li><code>DC_UPPER</code> - Donchian Channel Upper Band Trading Series</li> <li><code>DI_MINUS</code> - Directional Movement Index Minus Trading Series</li> <li><code>DI_PLUS</code> - Directional Movement Index Plus Trading Series</li> <li><code>DPO</code> - Detrended Price Oscillator Trading Series</li> <li><code>EFI</code> - Elder Force Index Trading Series</li> <li><code>EMA</code> - Exponential Moving Average Trading Series</li> <li><code>EOM</code> - Ease of Movement Trading Series</li> <li><code>HAMMER</code> - Hammer Candlestick Pattern Trading Series</li> <li><code>HIGH</code> - Highest Price Trading Series</li> <li><code>ICHIMOKU_BASE</code> - Ichimoku Base Line (Kijun-sen)</li> <li><code>ICHIMOKU_CONVERSION</code> - Ichimoku Conversion Line (Tenkan-sen)</li> <li><code>ICHIMOKU_LAGGING_SPAN</code> - Ichimoku Lagging Span (Chikou Span)</li> <li><code>ICHIMOKU_LEADING_SPAN_A</code> - Ichimoku Leading Span A (Senkou Span A)</li> <li><code>ICHIMOKU_LEADING_SPAN_B</code> - Ichimoku Leading Span B (Senkou Span B)</li> <li><code>KC_LOWER</code> - Keltner Channel Lower Band Trading Series</li> <li><code>KC_UPPER</code> - Keltner Channel Upper Band Trading Series</li> <li><code>KST</code> - Know Sure Thing Trading Series</li> <li><code>KST_SIGNAL</code> - Know Sure Thing Signal Line Trading Series</li> <li><code>LOW</code> - Lowest Price Trading Series</li> <li><code>MACD</code> - Moving Average Convergence Divergence Trading Series</li> <li><code>MACD_SIGNAL</code> - Moving Average Convergence Divergence Signal Line Trading Series</li> <li><code>MASS</code> - Mass Index Trading Series</li> <li><code>MFI</code> - Money Flow Index Trading Series</li> <li><code>MOMENTUM</code> - Momentum Trading Series</li> <li><code>OBV</code> - On Balance Volume Trading Series</li> <li><code>OPEN</code> - Opening Price Trading Series</li> <li><code>PERCENT_D</code> - Stochastic %D Trading Series</li> <li><code>PERCENT_K</code> - Stochastic %K Trading Series</li> <li><code>PVI</code> - Positive Volume Index Trading Series</li> <li><code>PVT</code> - Price Volume Trend Trading Series</li> <li><code>ROC</code> - Rate of Change Trading Series</li> <li><code>RSI</code> - Relative Strength Index Trading Series</li> <li><code>SMA</code> - Simple Moving Average Trading Series</li> <li><code>TRIX</code> - Triple Exponential Average Trading Series</li> <li><code>UO</code> - Ultimate Oscillator Trading Series</li> <li><code>VOLUME</code> - Volume Trading Series</li> <li><code>WILLR</code> - Williams %R Trading Series</li> </ul>"},{"location":"dev/modules/validation/","title":"Validation Module","text":"<p>The <code>validation</code> module is responsible for ensuring that trading strategies and their parameters are correctly defined before execution. This helps prevent simulation errors and enforces logical consistency across strategies.</p> <p>Main objective of this module is to validate outputs from the LLMs (large language models) and ensure that the strategies are executable. It checks for required fields, correct types and syntax. In some cases when it's possible to fix the output by obeying not required fields, the model will do it. </p> <p>This module is composed of two main parts: - Validation of entire strategies - Validation of individual parameters</p>"},{"location":"dev/modules/validation/#structure","title":"Structure","text":"<ul> <li><code>implemented_objects.py</code></li> <li> <p>Defines supported indicators, conditions, and other elements that are allowed in strategy definitions.</p> </li> <li> <p><code>strategy_validator.py</code></p> </li> <li> <p>Provides functionality to validate the overall structure of a trading strategy, ensuring that required fields are present and correctly configured. It provides this functionality by function <code>validate_strategy_string(strategy_str: str, logs: bool = False)</code> which takes a strategy string and returns a boolean indicating whether the strategy is valid or not. It also returns a dictionary of errors or changes made to the strategy string.</p> </li> <li> <p><code>parameter_validations/</code></p> </li> <li>Contains specialized validators for different types of parameters:<ul> <li><code>order_size_validator.py</code>: Validates order size parameters.</li> <li><code>stop_loss_validator.py</code>: Validates stop loss settings.</li> <li><code>take_profit_validator.py</code>: Validates take profit settings.</li> <li><code>ticker_validator.py</code>: Ensures ticker symbols are valid.</li> <li><code>date_validator.py</code>: Checks the validity of start and end dates.</li> <li><code>period_validator.py</code>: Validates time periods.</li> <li><code>capital_validator.py</code>: Ensures initial capital settings are realistic.</li> <li><code>position_type_validator.py</code>: Validates if the strategy is for long/short/both positions.</li> <li><code>interval_validator.py</code>: Ensures the trading interval is properly defined.</li> <li><code>trade_commissions_validator.py</code>: Validates trade commission structures.</li> <li><code>condition_validator.py</code>: Verifies that trading conditions are syntactically and logically correct.</li> </ul> </li> </ul>"},{"location":"dev/modules/validation/#how-it-works","title":"How It Works","text":"<ol> <li>Strategy Validation:</li> <li> <p>The <code>strategy_validator</code> reads a strategy definition and checks:</p> <ul> <li>All required fields are present.</li> <li>Fields conform to expected types and value ranges.</li> <li>Conditions reference only implemented indicators or functions.</li> </ul> </li> <li> <p>Parameter Validation:</p> </li> <li>Each parameter (e.g., stop loss, ticker, capital) is independently validated by its corresponding validator module.</li> <li>This modular approach allows for flexible extension if new parameters are introduced.</li> </ol>"},{"location":"dev/modules/conditions/","title":"<code>Condition</code> \u2014 Strategy Condition Module","text":"<p>This module defines the various condition classes used to create complex entry and exit logic in trading strategies. These conditions are categorized into logical, threshold-based, trend-following, Fibonacci retracement and parameterized (time/value-based) mechanisms.</p> <p>All condition classes inherit from the base <code>Condition</code> class, which provides a common interface for evaluating conditions against time series data.</p> <p>Abstract <code>Condition</code> class has the following methods:</p> <pre><code>class Condition(ABC):\n\n    @abstractmethod\n    def evaluate(self, data: pd.DataFrame) -&gt; pd.Series:\n        pass\n\n    @abstractmethod\n    def get_graphs(self, downloader: DownloadModule, df: pd.DataFrame) -&gt; [TradingPlot]:\n        pass\n\n    @abstractmethod\n    def to_string(self) -&gt; str:\n        pass\n\n    @abstractmethod\n    def to_dict(self) -&gt; dict:\n        pass\n</code></pre> <p>As a condition is evaluated over a time series, it returns a boolean series indicating whether the condition is satisfied at each point in time. These boolean series can be combined using logical conditions to create complex strategies and are stored in the <code>pd.DataFrame</code>.</p>"},{"location":"dev/modules/conditions/#module-structure","title":"Module Structure","text":""},{"location":"dev/modules/conditions/#1-logical-conditions","title":"1. Logical Conditions","text":"<p>Located in <code>trading_strategy_tester/conditions/logical_conditions/</code></p> <ul> <li><code>AND</code> \u2014 Combines multiple conditions using logical AND</li> <li><code>OR</code> \u2014 Combines multiple conditions using logical OR</li> </ul>"},{"location":"dev/modules/conditions/#2-threshold-conditions","title":"2. Threshold Conditions","text":"<p>Located in <code>trading_strategy_tester/conditions/threshold_conditions/</code></p> <ul> <li><code>CrossOverCondition</code> \u2014 Condition when one series crosses over another</li> <li><code>CrossUnderCondition</code> \u2014 Condition when one series crosses under another</li> <li><code>GreaterThanCondition</code> \u2014 Checks if one series is greater than another</li> <li><code>LessThanCondition</code> \u2014 Checks if one series is less than another</li> </ul>"},{"location":"dev/modules/conditions/#3-trend-conditions","title":"3. Trend Conditions","text":"<p>Located in <code>trading_strategy_tester/conditions/trend_conditions/</code></p> <ul> <li><code>UptrendForXDaysCondition</code> \u2014 Detects uptrend over X consecutive days</li> <li><code>DowntrendForXDaysCondition</code> \u2014 Detects downtrend over X consecutive days</li> </ul>"},{"location":"dev/modules/conditions/#4-fibonacci-retracement-conditions","title":"4. Fibonacci Retracement Conditions","text":"<p>Located in <code>trading_strategy_tester/conditions/fibonacci_retracement_levels_conditions/</code></p> <ul> <li><code>UptrendFibRetracementLevelCondition</code> \u2014 Uses Fibonacci levels during uptrend</li> <li><code>DowntrendFibRetracementLevelCondition</code> \u2014 Uses Fibonacci levels during downtrend</li> </ul>"},{"location":"dev/modules/conditions/#5-parameterized-conditions","title":"5. Parameterized Conditions","text":"<p>Located in <code>trading_strategy_tester/conditions/parameterized_conditions/</code></p> <ul> <li><code>AfterXDaysCondition</code> \u2014 Triggers condition after X days of another condition</li> <li><code>ChangeOfXPercentPerYDaysCondition</code> \u2014 Checks percentage change over Y days</li> <li><code>IntraIntervalChangeOfXPercentCondition</code> \u2014 Percentage change within a single interval chosen in the strategy definition</li> </ul>"},{"location":"dev/modules/conditions/#integration","title":"Integration","text":"<p>Each condition class is typically used inside a <code>Strategy</code> object as a <code>buy_condition</code> or <code>sell_condition</code>. Conditions can be nested using logical conditions for complex rule-based strategies.</p>"},{"location":"dev/modules/conditions/fibonacci_retracement_levels_conditions/","title":"Fibonacci Retracement Conditions","text":"<p>Fibonacci retracement conditions are used to detect price reactions at key Fibonacci levels during uptrends or downtrends. These are commonly used in technical analysis to identify potential reversal or continuation zones.</p> <p>All Fibonacci retracement conditions inherit from the base <code>Condition</code> class and implement the standard <code>evaluate</code>, <code>get_graphs</code>, and <code>to_dict</code> methods.</p>"},{"location":"dev/modules/conditions/fibonacci_retracement_levels_conditions/#uptrendfibretracementlevelcondition","title":"<code>UptrendFibRetracementLevelCondition</code>","text":"<p>Returns <code>True</code> if the price pulls back to a specified Fibonacci level during an uptrend.</p>"},{"location":"dev/modules/conditions/fibonacci_retracement_levels_conditions/#arguments","title":"Arguments","text":"<pre><code>UptrendFibRetracementLevelCondition(fib_level: FibonacciLevels, length: int)\n</code></pre> <ul> <li><code>fib_level</code>: The Fibonacci level to test. Supported levels are linked here.</li> <li><code>length</code>: Lookback period for detecting the local swing high and low.</li> </ul>"},{"location":"dev/modules/conditions/fibonacci_retracement_levels_conditions/#downtrendfibretracementlevelcondition","title":"<code>DowntrendFibRetracementLevelCondition</code>","text":"<p>Returns <code>True</code> if the price bounces back to a specified Fibonacci level during a downtrend.</p>"},{"location":"dev/modules/conditions/fibonacci_retracement_levels_conditions/#arguments_1","title":"Arguments","text":"<pre><code>DowntrendFibRetracementLevelCondition(fib_level: FibonacciLevels, length: int)\n</code></pre> <ul> <li><code>fib_level</code>: The Fibonacci level to test. Supported levels are linked here.</li> <li><code>length</code>: Lookback period for detecting the local swing high and low.</li> </ul>"},{"location":"dev/modules/conditions/fibonacci_retracement_levels_conditions/#examples","title":"Examples","text":"<pre><code>condition = UptrendFibRetracementLevelCondition(\n    fib_level=FibonacciLevels.LEVEL_50,\n    length=20\n)\n</code></pre> <p>This condition is met if the price retraces to the 50% Fibonacci level during an uptrend over the past 20 days.</p> <pre><code>condition = DowntrendFibRetracementLevelCondition(\n    fib_level=FibonacciLevels.LEVEL_61_8,\n    length=30\n)\n</code></pre> <p>This condition is met if the price retraces to the 61.8% Fibonacci level during a downtrend over the last 30 days.</p>"},{"location":"dev/modules/conditions/logical_conditions/","title":"Logical Conditions","text":"<p>Logical conditions are used to combine multiple other conditions using boolean logic. They allow you to construct complex condition trees that can be evaluated as part of a trading strategy.</p> <p>All logical conditions inherit from the base <code>Condition</code> class and implement the standard <code>evaluate</code>, <code>get_graphs</code>, and <code>to_dict</code> methods.</p>"},{"location":"dev/modules/conditions/logical_conditions/#and","title":"<code>AND</code>","text":"<p>Combines two or more conditions and returns <code>True</code> only if all of them are satisfied at the same time.</p>"},{"location":"dev/modules/conditions/logical_conditions/#arguments","title":"Arguments","text":"<pre><code>AND(*conditions: Condition)\n</code></pre> <ul> <li><code>conditions</code>: A variable number of <code>Condition</code> instances to be combined with logical AND.</li> </ul>"},{"location":"dev/modules/conditions/logical_conditions/#or","title":"<code>OR</code>","text":"<p>Combines two or more conditions and returns <code>True</code> if any of them are satisfied.</p>"},{"location":"dev/modules/conditions/logical_conditions/#arguments_1","title":"Arguments","text":"<pre><code>OR(*conditions: Condition)\n</code></pre> <ul> <li><code>conditions</code>: A variable number of <code>Condition</code> instances to be combined with logical OR.</li> </ul>"},{"location":"dev/modules/conditions/logical_conditions/#example","title":"Example","text":"<pre><code>condition = AND(\n    CrossOverCondition(\n        first_series=SMA(\"AAPL\", SourceType.CLOSE, 50),\n        second_series=SMA(\"AAPL\", SourceType.CLOSE, 200)\n    ),\n    GreaterThanCondition(\n        first_series=RSI(\"AAPL\", SourceType.CLOSE, 14),\n        second_series=CONST(30)\n    )\n)\n</code></pre> <p>This example evaluates if the 50-SMA has crossed above the 200-SMA and the RSI is above 30.</p>"},{"location":"dev/modules/conditions/parameterized_conditions/","title":"Parameterized Conditions","text":"<p>Parameterized conditions evaluate changes in indicators or price over specified timeframes or intervals. These conditions enable more dynamic, time-sensitive logic in trading strategies.</p> <p>All parameterized conditions inherit from the base <code>Condition</code> class and implement the standard <code>evaluate</code>, <code>get_graphs</code>, and <code>to_dict</code> methods.</p>"},{"location":"dev/modules/conditions/parameterized_conditions/#afterxdayscondition","title":"<code>AfterXDaysCondition</code>","text":"<p>Returns <code>True</code> if a given condition has been satisfied before a specified number of days.</p>"},{"location":"dev/modules/conditions/parameterized_conditions/#arguments","title":"Arguments","text":"<pre><code>AfterXDaysCondition(condition: Condition, number_of_days: int)\n</code></pre> <ul> <li><code>condition</code>: The base condition to track.</li> <li><code>number_of_days</code>: Number of days after which the condition should be evaluated.</li> </ul>"},{"location":"dev/modules/conditions/parameterized_conditions/#changeofxpercentperydayscondition","title":"<code>ChangeOfXPercentPerYDaysCondition</code>","text":"<p>Checks if the given series has changed by a specified percentage over a given number of days.</p>"},{"location":"dev/modules/conditions/parameterized_conditions/#arguments_1","title":"Arguments","text":"<pre><code>ChangeOfXPercentPerYDaysCondition(series: TradingSeries, percent: float, number_of_days: int)\n</code></pre> <ul> <li><code>series</code>: The price or indicator series to evaluate.</li> <li><code>percent</code>: The percentage change threshold.</li> <li><code>number_of_days</code>: The number of days over which the change is evaluated.</li> </ul>"},{"location":"dev/modules/conditions/parameterized_conditions/#intraintervalchangeofxpercentcondition","title":"<code>IntraIntervalChangeOfXPercentCondition</code>","text":"<p>Checks if the percentage change within a single interval defined by the strategy exceeds a threshold.</p>"},{"location":"dev/modules/conditions/parameterized_conditions/#arguments_2","title":"Arguments","text":"<pre><code>IntraIntervalChangeOfXPercentCondition(series: TradingSeries, percent: float)\n</code></pre> <ul> <li><code>series</code>: The price or indicator series to evaluate.</li> <li><code>percent</code>: The threshold percentage for the change to trigger the condition.</li> </ul>"},{"location":"dev/modules/conditions/parameterized_conditions/#examples","title":"Examples","text":"<pre><code>condition = ChangeOfXPercentPerYDaysCondition(\n    series=CLOSE(\"AAPL\"),\n    percent=5.0,\n    number_of_days=10\n)\n</code></pre> <p>This condition evaluates <code>True</code> if AAPL's close has changed by at least 5% over the last 10 days.</p> <pre><code>condition = AfterXDaysCondition(\n    condition=CrossOverCondition(EMA(\"AAPL\", SourceType.CLOSE, 10, 0), CONST(150)),\n    number_of_days=3\n)\n</code></pre> <p>This condition evaluates <code>True</code> if AAPL's 10-day EMA has crossed above 150 3 days ago.</p>"},{"location":"dev/modules/conditions/threshold_conditions/","title":"Threshold Conditions","text":"<p>Threshold conditions compare two values or series and return a boolean result based on specific criteria such as crossing, being greater than, or being less than. These are foundational for building rule-based entries and exits in trading strategies.</p> <p>All threshold conditions inherit from the base <code>Condition</code> class and implement the standard <code>evaluate</code>, <code>get_graphs</code>, and <code>to_dict</code> methods.</p>"},{"location":"dev/modules/conditions/threshold_conditions/#crossovercondition","title":"<code>CrossOverCondition</code>","text":"<p>Triggers when the first series crosses above the second series.</p>"},{"location":"dev/modules/conditions/threshold_conditions/#arguments","title":"Arguments","text":"<pre><code>CrossOverCondition(first_series: TradingSeries, second_series: TradingSeries)\n</code></pre> <ul> <li><code>first_series</code>: Trading series which can be an indicator or price series.</li> <li><code>second_series</code>: The reference series to compare against.</li> </ul>"},{"location":"dev/modules/conditions/threshold_conditions/#crossundercondition","title":"<code>CrossUnderCondition</code>","text":"<p>Triggers when the first series crosses below the second series.</p>"},{"location":"dev/modules/conditions/threshold_conditions/#arguments_1","title":"Arguments","text":"<pre><code>CrossUnderCondition(first_series: TradingSeries, second_series: TradingSeries)\n</code></pre> <ul> <li><code>first_series</code>: Trading series which can be an indicator or price series.</li> <li><code>second_series</code>: The reference series to compare against.</li> </ul>"},{"location":"dev/modules/conditions/threshold_conditions/#greaterthancondition","title":"<code>GreaterThanCondition</code>","text":"<p>Returns <code>True</code> when the first series is strictly greater than the second series.</p>"},{"location":"dev/modules/conditions/threshold_conditions/#arguments_2","title":"Arguments","text":"<pre><code>GreaterThanCondition(first_series: TradingSeries, second_series: TradingSeries)\n</code></pre> <ul> <li><code>first_series</code>: Trading series which can be an indicator or price series.</li> <li><code>second_series</code>: The reference series to compare against.</li> </ul>"},{"location":"dev/modules/conditions/threshold_conditions/#lessthancondition","title":"<code>LessThanCondition</code>","text":"<p>Returns <code>True</code> when the first series is strictly less than the second series.</p>"},{"location":"dev/modules/conditions/threshold_conditions/#arguments_3","title":"Arguments","text":"<pre><code>LessThanCondition(first_series: TradingSeries, second_series: TradingSeries)\n</code></pre> <ul> <li><code>first_series</code>: Trading series which can be an indicator or price series.</li> <li><code>second_series</code>: The reference series to compare against.</li> </ul>"},{"location":"dev/modules/conditions/threshold_conditions/#examples","title":"Examples","text":"<pre><code>condition =CrossOverCondition(\n    first_series=RSI(\"AAPL\", SourceType.CLOSE, 14),\n    second_series=CONST(30)\n)\n</code></pre> <p>This example triggers if RSI crosses above 30.</p> <pre><code>condition=LessThanCondition(\n    first_series=CLOSE(\"AAPL\"),\n    second_series=BB_LOWER(\"AAPL\", SourceType.CLOSE, 20, SmoothingType.SMA, 2, 0)\n)\n</code></pre> <p>This example triggers if Close price is below the lower Bollinger Band.</p>"},{"location":"dev/modules/conditions/trend_conditions/","title":"Trend Conditions","text":"<p>Trend conditions evaluate whether a price or indicator series is in a sustained uptrend or downtrend over a specified number of days. These conditions are useful for capturing momentum and trend-following strategy logic.</p> <p>All trend conditions inherit from the base <code>Condition</code> class and implement the standard <code>evaluate</code>, <code>get_graphs</code>, and <code>to_dict</code> methods.</p>"},{"location":"dev/modules/conditions/trend_conditions/#uptrendforxdayscondition","title":"<code>UptrendForXDaysCondition</code>","text":"<p>Returns <code>True</code> if the specified trading series is in an uptrend for a consecutive number of days.</p>"},{"location":"dev/modules/conditions/trend_conditions/#arguments","title":"Arguments","text":"<pre><code>UptrendForXDaysCondition(series: TradingSeries, number_of_days: int)\n</code></pre> <ul> <li><code>series</code>: A trading series (indicator or price) to evaluate.</li> <li><code>number_of_days</code>: Number of consecutive days where the condition must hold for the trend to be confirmed.</li> </ul>"},{"location":"dev/modules/conditions/trend_conditions/#downtrendforxdayscondition","title":"<code>DowntrendForXDaysCondition</code>","text":"<p>Returns <code>True</code> if the specified trading series is in a downtrend for a consecutive number of days.</p>"},{"location":"dev/modules/conditions/trend_conditions/#arguments_1","title":"Arguments","text":"<pre><code>DowntrendForXDaysCondition(series: TradingSeries, number_of_days: int)\n</code></pre> <ul> <li><code>series</code>: A trading series (indicator or price) to evaluate.</li> <li><code>number_of_days</code>: Number of consecutive days where the condition must hold for the trend to be confirmed.</li> </ul>"},{"location":"dev/modules/conditions/trend_conditions/#examples","title":"Examples","text":"<pre><code>condition = UptrendForXDaysCondition(\n    series=EMA(\"AAPL\", SourceType.CLOSE, 20, 0),\n    number_of_days=5\n)\n</code></pre> <p>This example triggers if the 20-day EMA of AAPL has been increasing for the past 5 days.</p> <pre><code>condition = DowntrendForXDaysCondition(\n    series=CLOSE(\"AAPL\"),\n    number_of_days=3\n)\n</code></pre> <p>This example triggers if the closing price of AAPL has been falling for 3 consecutive days.</p>"},{"location":"dev/modules/enums/fibonacci_levels/","title":"<code>FibonacciLevels</code> Enum","text":"<p>The <code>FibonacciLevels</code> enum defines commonly used Fibonacci retracement levels used in technical analysis. These levels help identify potential support and resistance zones based on historical price swings.</p>"},{"location":"dev/modules/enums/fibonacci_levels/#enum-import","title":"Enum Import","text":"<pre><code>from trading_strategy_tester.enums.fibonacci_levels_enum import FibonacciLevels\n</code></pre>"},{"location":"dev/modules/enums/fibonacci_levels/#members","title":"Members","text":"<ul> <li><code>FibonacciLevels.LEVEL_0</code></li> </ul> <p>The 0% retracement level. Represents no retracement.</p> <ul> <li><code>FibonacciLevels.LEVEL_23_6</code></li> </ul> <p>A shallow retracement level often observed in fast-moving trends.</p> <ul> <li><code>FibonacciLevels.LEVEL_38_2</code></li> </ul> <p>A moderate retracement level commonly used to detect pullbacks.</p> <ul> <li><code>FibonacciLevels.LEVEL_50</code></li> </ul> <p>A psychological midpoint level. While not from the Fibonacci sequence, it's widely used.</p> <ul> <li><code>FibonacciLevels.LEVEL_61_8</code></li> </ul> <p>The Golden Ratio, considered one of the most critical levels in technical analysis.</p> <ul> <li><code>FibonacciLevels.LEVEL_100</code></li> </ul> <p>Represents a full retracement of the prior move.</p>"},{"location":"dev/modules/enums/fibonacci_levels/#usage-example","title":"Usage Example","text":"<pre><code>condition = UptrendFibRetracementLevelCondition(\n    fib_level=FibonacciLevels.LEVEL_61_8,\n    length=20\n)\n</code></pre> <p>This sets a condition for a retracement to the 61.8% Fibonacci level in an uptrend based on the last 20 days of price action.</p>"},{"location":"dev/modules/enums/interval/","title":"<code>Interval</code> Enum","text":"<p>The <code>Interval</code> enum defines commonly used time intervals for fetching and aggregating financial or time-series data. These intervals are typically used when specifying the resolution of historical price data in trading strategies.</p>"},{"location":"dev/modules/enums/interval/#enum-import","title":"Enum Import","text":"<pre><code>from trading_strategy_tester.enums.interval_enum import Interval\n</code></pre>"},{"location":"dev/modules/enums/interval/#members","title":"Members","text":"<ul> <li> <p><code>Interval.ONE_DAY</code> \u2014 <code>'1d'</code>   Represents a 1-day interval. Commonly used for daily price charts.</p> </li> <li> <p><code>Interval.FIVE_DAYS</code> \u2014 <code>'5d'</code>   Represents a 5-day interval. Useful for shorter-term swing strategies.</p> </li> <li> <p><code>Interval.ONE_WEEK</code> \u2014 <code>'1wk'</code>   Represents a 1-week interval. Smooths out daily volatility.</p> </li> <li> <p><code>Interval.ONE_MONTH</code> \u2014 <code>'1mo'</code>   Represents a 1-month interval. Good for longer-term or macro strategies.</p> </li> <li> <p><code>Interval.THREE_MONTHS</code> \u2014 <code>'3mo'</code>   Represents a 3-month interval. Used for broad trend analysis or quarterly cycles.</p> </li> </ul>"},{"location":"dev/modules/enums/interval/#usage-example","title":"Usage Example","text":"<pre><code>strategy = Strategy(\n    ticker=\"AAPL\",\n    interval=Interval.ONE_DAY,\n    ...\n)\n</code></pre> <p>This will configure the strategy to operate on daily interval data.</p>"},{"location":"dev/modules/enums/period/","title":"<code>Period</code> Enum","text":"<p>The <code>Period</code> enum defines common time spans over which historical data can be requested or analyzed. These are typically used in trading strategy backtesting and financial data aggregation.</p>"},{"location":"dev/modules/enums/period/#enum-import","title":"Enum Import","text":"<pre><code>from trading_strategy_tester.enums.period_enum import Period\n</code></pre>"},{"location":"dev/modules/enums/period/#members","title":"Members","text":"<ul> <li> <p><code>Period.ONE_DAY</code> \u2014 <code>'1d'</code>   A 1-day period.</p> </li> <li> <p><code>Period.FIVE_DAYS</code> \u2014 <code>'5d'</code>   A 5-day period.</p> </li> <li> <p><code>Period.ONE_MONTH</code> \u2014 <code>'1mo'</code>   A 1-month period.</p> </li> <li> <p><code>Period.THREE_MONTHS</code> \u2014 <code>'3mo'</code>   A 3-month period.</p> </li> <li> <p><code>Period.SIX_MONTHS</code> \u2014 <code>'6mo'</code>   A 6-month period.</p> </li> <li> <p><code>Period.ONE_YEAR</code> \u2014 <code>'1y'</code>   A 1-year period.</p> </li> <li> <p><code>Period.TWO_YEARS</code> \u2014 <code>'2y'</code>   A 2-year period.</p> </li> <li> <p><code>Period.FIVE_YEARS</code> \u2014 <code>'5y'</code>   A 5-year period.</p> </li> <li> <p><code>Period.TEN_YEARS</code> \u2014 <code>'10y'</code>   A 10-year period.</p> </li> <li> <p><code>Period.YEAR_TO_DATE</code> \u2014 <code>'ytd'</code>   Year-to-date period.</p> </li> <li> <p><code>Period.MAX</code> \u2014 <code>'max'</code>   The maximum available data period.</p> </li> <li> <p><code>Period.NOT_PASSED</code> \u2014 <code>'not_passed'</code>   Indicates that no period was explicitly passed. Used as a fallback to date range (<code>start_date</code>, <code>end_date</code>).</p> </li> </ul>"},{"location":"dev/modules/enums/period/#usage-example","title":"Usage Example","text":"<pre><code>strategy = Strategy(\n    ticker=\"AAPL\",\n    period=Period.ONE_YEAR,\n    ...\n)\n</code></pre> <p>This configures the strategy to run using 1 year of historical data.</p>"},{"location":"dev/modules/enums/position_type/","title":"<code>PositionTypeEnum</code> Enum","text":"<p>The <code>PositionTypeEnum</code> defines the types of market positions a trading strategy can take. This determines whether the strategy will buy (long), sell short (short), or potentially do both depending on the logic.</p>"},{"location":"dev/modules/enums/position_type/#enum-import","title":"Enum Import","text":"<pre><code>from trading_strategy_tester.enums.position_type_enum import PositionTypeEnum\n</code></pre>"},{"location":"dev/modules/enums/position_type/#members","title":"Members","text":"<ul> <li> <p><code>PositionTypeEnum.LONG</code> \u2014 <code>'LONG'</code>   Represents a long position. The strategy buys an asset expecting its price to increase.</p> </li> <li> <p><code>PositionTypeEnum.SHORT</code> \u2014 <code>'SHORT'</code>   Represents a short position. The strategy sells an asset expecting its price to decrease.</p> </li> <li> <p><code>PositionTypeEnum.LONG_SHORT_COMBINED</code> \u2014 <code>'LONG_SHORT_COMBINED'</code>   The strategy can take both long and short positions \u2014 either at the same time or based on separate conditions.</p> </li> </ul>"},{"location":"dev/modules/enums/position_type/#usage-example","title":"Usage Example","text":"<pre><code>strategy = Strategy(\n    ticker=\"AAPL\",\n    position_type=PositionTypeEnum.LONG,\n    ...\n)\n</code></pre> <p>This configures the strategy to take long positions only.</p>"},{"location":"dev/modules/enums/smoothing/","title":"<code>SmoothingType</code> Enum","text":"<p>The <code>SmoothingType</code> enum defines the available smoothing techniques for moving average calculations in technical indicators. These methods help reduce noise and identify trends in time series data.</p>"},{"location":"dev/modules/enums/smoothing/#enum-import","title":"Enum Import","text":"<pre><code>from trading_strategy_tester.enums.smoothing_enum import SmoothingType\n</code></pre>"},{"location":"dev/modules/enums/smoothing/#enum-members","title":"Enum Members","text":"<ul> <li> <p><code>SmoothingType.RMA</code> \u2014 <code>'RMA'</code> Running Moving Average. Also known as Wilder\u2019s Moving Average. It gives more weight to older values than EMA.</p> </li> <li> <p><code>SmoothingType.SMA</code> \u2014 <code>'SMA'</code> Simple Moving Average. Unweighted mean of the previous N data points.</p> </li> <li> <p><code>SmoothingType.EMA</code> \u2014 <code>'EMA'</code> Exponential Moving Average. Applies exponentially decreasing weights to past data points, giving more importance to recent values.</p> </li> <li> <p><code>SmoothingType.WMA</code> \u2014 <code>'WMA'</code> Weighted Moving Average. Assigns a linear weight to each value in the series, with recent data weighted more heavily.</p> </li> </ul>"},{"location":"dev/modules/enums/smoothing/#usage-example","title":"Usage Example","text":"<pre><code>atr_series = ATR(ticker='AAPL', length=14, smoothing_type=SmoothingType.EMA)\n</code></pre> <p>This example shows how to use the <code>SmoothingType</code> enum when creating an ATR (Average True Range) indicator instance. The <code>SmoothingType.EMA</code> option specifies that the Exponential Moving Average should be used for smoothing the ATR values.</p>"},{"location":"dev/modules/enums/source/","title":"<code>SourceType</code> Enum","text":"<p>The <code>SourceType</code> enum defines the different types of price or volume sources used in indicator calculations and condition evaluations. These are commonly passed as parameters to <code>TradingSeries</code> classes like <code>RSI</code>, <code>EMA</code>, <code>BB_UPPER</code>, etc.</p>"},{"location":"dev/modules/enums/source/#enum-import","title":"Enum Import","text":"<pre><code>from trading_strategy_tester.enums.source_enum import SourceType\n</code></pre>"},{"location":"dev/modules/enums/source/#members","title":"Members","text":"<ul> <li> <p><code>SourceType.CLOSE</code> \u2014 <code>'Close'</code>   The closing price of the instrument.</p> </li> <li> <p><code>SourceType.OPEN</code> \u2014 <code>'Open'</code>   The opening price of the instrument.</p> </li> <li> <p><code>SourceType.HIGH</code> \u2014 <code>'High'</code>   The highest price reached during the period.</p> </li> <li> <p><code>SourceType.LOW</code> \u2014 <code>'Low'</code>   The lowest price reached during the period.</p> </li> <li> <p><code>SourceType.HLC3</code> \u2014 <code>'HLC3'</code>   The average of the High, Low, and Close: <code>(High + Low + Close) / 3</code>.</p> </li> <li> <p><code>SourceType.HL2</code> \u2014 <code>'HL2'</code>   The average of the High and Low: <code>(High + Low) / 2</code>.</p> </li> <li> <p><code>SourceType.OHLC4</code> \u2014 <code>'OHLC4'</code>   The average of Open, High, Low, and Close: <code>(Open + High + Low + Close) / 4</code>.</p> </li> <li> <p><code>SourceType.HLCC4</code> \u2014 <code>'HLCC4'</code>   Weighted average of High, Low, and twice the Close: <code>(High + Low + 2 * Close) / 4</code>.</p> </li> <li> <p><code>SourceType.VOLUME</code> \u2014 <code>'Volume'</code>   The trading volume for the instrument.</p> </li> </ul>"},{"location":"dev/modules/enums/source/#usage-example","title":"Usage Example","text":"<pre><code>rsi_series = RSI(ticker=\"AAPL\", source=SourceType.CLOSE, length=14)\n</code></pre> <p>This configures an RSI series to use closing prices for its calculation.</p>"},{"location":"dev/modules/strategy_parameters/order_size/","title":"<code>OrderSize</code> Class","text":"<p>These classes determine how much capital is allocated to each trade. <code>OrderSize</code> is an abstract base class, and its subclasses define specific order sizing strategies.</p> <pre><code>class OrderSize(ABC):\n\n    def __init__(self, value: float):\n        self.value = value\n\n    @abstractmethod\n    def get_invested_amount(self, share_price: float, current_capital: float) -&gt; (float, float):\n        pass\n\n    def to_dict(self):\n        return {'value': self.value}\n</code></pre>"},{"location":"dev/modules/strategy_parameters/order_size/#methods","title":"Methods:","text":"<ul> <li><code>get_invested_amount(share_price: float, current_capital: float) -&gt; (float, float)</code>:   Calculates the amount to invest based on the share price and current capital. Returns a tuple of the invested amount and the number of shares/contracts.</li> <li><code>to_dict()</code>:   Serializes the order size object into a dictionary for testing purposes.</li> </ul>"},{"location":"dev/modules/strategy_parameters/order_size/#usd","title":"<code>USD</code>","text":"<p>Fixed dollar amount allocated to each trade. Partition shares will be used when dollar amount is not divisible by share price.</p> <pre><code>USD(value: float)\n</code></pre> <ul> <li><code>value</code> (<code>float</code>): Dollar amount for the trade.</li> </ul>"},{"location":"dev/modules/strategy_parameters/order_size/#example-usage","title":"Example Usage","text":"<pre><code>Strategy(\n    ...\n    order_size = USD(1000)\n)\n</code></pre>"},{"location":"dev/modules/strategy_parameters/order_size/#contracts","title":"<code>Contracts</code>","text":"<p>Fixed number of contracts/shares per trade.</p> <pre><code>Contracts(value: float)\n</code></pre> <ul> <li><code>value</code> (<code>float</code>): Number of contracts or shares.</li> </ul>"},{"location":"dev/modules/strategy_parameters/order_size/#example-usage_1","title":"Example Usage","text":"<pre><code>Strategy(\n    ...\n    order_size = Contracts(1)\n)\n</code></pre> <p><code>Contracts(1)</code> is also set as a default value in the <code>Strategy</code> class. This means that if no order size is specified, one contract will be used by default in every trade.</p>"},{"location":"dev/modules/strategy_parameters/order_size/#percentofequity","title":"<code>PercentOfEquity</code>","text":"<p>Dynamic sizing based on the current equity price. If the equity price is $100 and the order size is 10%, then $10 will be allocated to the trade.</p> <pre><code>PercentOfEquity(value: float)\n</code></pre> <ul> <li><code>value</code> (<code>float</code>): Percentage of equity to allocate per trade.</li> </ul>"},{"location":"dev/modules/strategy_parameters/order_size/#example-usage_2","title":"Example Usage","text":"<pre><code>Strategy(\n    ...\n    order_size = PercentOfEquity(50)\n)\n</code></pre>"},{"location":"dev/modules/strategy_parameters/stop_loss/","title":"<code>StopLoss</code> \u2014 Stop Loss Condition","text":"<p>The <code>StopLoss</code> object defines a stop loss mechanism for trades, used to automatically exit a position when a loss threshold is breached.</p> <p>It is implemented in the stop_loss.py module.</p> <p>Stop loss takes into account the position type and calculates the loss level for long and short trades differently.</p>"},{"location":"dev/modules/strategy_parameters/stop_loss/#parameters","title":"Parameters","text":"<pre><code>StopLoss(\n    percentage: float,\n    stop_loss_type: StopLossType\n)\n</code></pre> <ul> <li> <p><code>percentage</code> (<code>float</code>):   The maximum allowable loss as a percentage of the entry price (e.g., 0.02 for 2%).</p> </li> <li> <p><code>stop_loss_type</code> (<code>StopLossType</code>):   Type of stop loss. Supported types are linked here.</p> <ul> <li><code>NORMAL</code> \u2014 Traditional fixed stop loss.</li> <li><code>TRAILING</code> \u2014 Trailing stop loss that moves in favor of the trade.</li> </ul> </li> </ul>"},{"location":"dev/modules/strategy_parameters/stop_loss/#description","title":"Description","text":"<ul> <li>A Normal Stop Loss exits the position if price falls a fixed percentage from the entry.</li> <li>A Trailing Stop Loss follows the price if it moves favorably and locks in gains while maintaining a loss threshold.</li> </ul>"},{"location":"dev/modules/strategy_parameters/stop_loss/#example-usage","title":"Example Usage","text":"<pre><code>StopLoss(\n    percentage=3,\n    stop_loss_type=StopLossType.TRAILING\n)\n</code></pre> <p>This sets a 3% trailing stop loss on a trade.</p>"},{"location":"dev/modules/strategy_parameters/stop_loss/#stop-loss-types","title":"Stop Loss Types","text":"<p>The <code>StopLossType</code> enum defines the types of stop loss mechanisms available for trades. This determines how the stop loss is applied and managed during the trade.</p>"},{"location":"dev/modules/strategy_parameters/stop_loss/#enum-import","title":"Enum Import","text":"<pre><code>from trading_strategy_tester.enums.stop_loss_type_enum import StopLossType\n</code></pre>"},{"location":"dev/modules/strategy_parameters/stop_loss/#members","title":"Members","text":"<ul> <li><code>StopLossType.NORMAL</code> \u2014 <code>'NORMAL'</code>   Represents a normal stop loss. The stop loss is fixed at a certain percentage below the entry price.</li> <li><code>StopLossType.TRAILING</code> \u2014 <code>'TRAILING'</code>   Represents a trailing stop loss. The stop loss moves in favor of the trade, locking in profits as the price increases.</li> </ul>"},{"location":"dev/modules/strategy_parameters/take_profit/","title":"<code>TakeProfit</code> \u2014 Take Profit Module","text":"<p>The <code>TakeProfit</code> object defines a take profit mechanism for trades, used to automatically exit a position when a gain threshold is achieved.</p> <p>It is implemented in the take_profit.py file.</p> <p>It takes into account the position type and calculates the profit level for long and short trades differently.</p>"},{"location":"dev/modules/strategy_parameters/take_profit/#parameters","title":"Parameters","text":"<pre><code>TakeProfit(\n    percentage: float\n)\n</code></pre> <ul> <li><code>percentage</code> (<code>float</code>):   The minimum profit percentage needed to trigger a take profit exit (e.g., 0.05 for 5%).</li> </ul>"},{"location":"dev/modules/strategy_parameters/take_profit/#description","title":"Description","text":"<ul> <li>A Take Profit exits the position when the trade's price appreciates by a set percentage from the entry price.</li> <li>Helps lock in gains before a potential reversal.</li> </ul>"},{"location":"dev/modules/strategy_parameters/take_profit/#example-usage","title":"Example Usage","text":"<pre><code>TakeProfit(\n    percentage=5\n)\n</code></pre> <p>This sets a take profit target at 5% above the entry price.</p>"},{"location":"dev/modules/strategy_parameters/trade_commissions/","title":"<code>TradeCommissions</code> Classes","text":"<p>These classes define how trade costs are calculated. Trade commissions are applied to each trade, affecting the overall profit or loss.</p> <p>The <code>TradeCommissions</code> class is an abstract base class, and its subclasses define specific commission structures.</p> <pre><code>class TradeCommissions(ABC):\n\n    def __init__(self, value: float):\n        self.value = value\n\n    @abstractmethod\n    def get_commission(self, invested: float, contracts: float) -&gt; float:\n        pass\n\n    def to_dict(self):\n        return {'value': self.value}\n</code></pre>"},{"location":"dev/modules/strategy_parameters/trade_commissions/#methods","title":"Methods:","text":"<ul> <li><code>get_commission(invested: float, contracts: float) -&gt; float</code>:   Calculates the commission based on the invested amount and number of contracts. Returns the commission amount.</li> <li><code>to_dict()</code>:   Serializes the commission object into a dictionary for testing purposes.</li> </ul>"},{"location":"dev/modules/strategy_parameters/trade_commissions/#moneycommissions","title":"<code>MoneyCommissions</code>","text":"<p>Fixed commission per trade in dollars.</p> <pre><code>MoneyCommissions(value: float)\n</code></pre> <ul> <li><code>value</code> (<code>float</code>): Flat dollar amount commission per trade.</li> </ul>"},{"location":"dev/modules/strategy_parameters/trade_commissions/#example-usage","title":"Example Usage","text":"<pre><code>Strategy(\n    ...\n    trade_commissions = MoneyCommissions(5.0)\n)\n</code></pre> <p>This configures the strategy to apply a $5 commission for each trade executed.</p>"},{"location":"dev/modules/strategy_parameters/trade_commissions/#percentagecommissions","title":"<code>PercentageCommissions</code>","text":"<p>Commission based on a percentage of the trade's value.</p> <pre><code>PercentageCommissions(value: float)\n</code></pre> <ul> <li><code>value</code> (<code>float</code>): Commission percentage.</li> </ul>"},{"location":"dev/modules/strategy_parameters/trade_commissions/#example-usage_1","title":"Example Usage","text":"<pre><code>Strategy(\n    ...\n    trade_commissions = PercentageCommissions(0.1)\n)\n</code></pre> <p>This configures the strategy to apply a 0.1% commission on the value of each trade executed.</p>"},{"location":"dev/modules/trading_series/adx/","title":"<code>ADX</code> \u2014 Average Directional Index Trading Series","text":"<p>The <code>ADX</code> trading series represents the Average Directional Index (ADX), a popular indicator that measures the strength of a trend, without regard to its direction. Higher ADX values indicate a stronger trend.</p> <p>It is built upon the ADX indicator implementation from the indicators module.</p>"},{"location":"dev/modules/trading_series/adx/#parameters","title":"Parameters","text":"<pre><code>ADX(\n    ticker: str,\n    smoothing_length: int = 14,\n    length: int = 14\n)\n</code></pre> <ul> <li> <p><code>ticker</code> (<code>str</code>): The symbol of the asset (e.g., <code>\"AAPL\"</code>).</p> </li> <li> <p><code>smoothing_length</code> (<code>int</code>): Number of periods used for smoothing the ADX line. Default is 14, which is a common setting in technical analysis.</p> </li> <li> <p><code>length</code> (<code>int</code>): The lookback period over which the +DI and -DI are calculated before smoothing. Default is 14, which is a common setting in technical analysis.</p> </li> </ul>"},{"location":"dev/modules/trading_series/adx/#description","title":"Description","text":"<p>The Average Directional Index is used to quantify the strength of a trend. - ADX above 25 generally indicates a strong trend. - ADX below 20 may suggest a weak trend or range-bound market. - It does not indicate the direction of the trend \u2014 only the strength.</p>"},{"location":"dev/modules/trading_series/adx/#example-usage","title":"Example Usage","text":"<pre><code>ADX(\n    ticker=\"AAPL\",\n    smoothing_length=14,\n    length=14\n)\n</code></pre> <p>This creates an ADX Trading Series for AAPL using a 14-period length and 14-period smoothing. Using get_data() and passing a downloader instance and a DataFrame will return the ADX values for the specified ticker.</p>"},{"location":"dev/modules/trading_series/aroon_down/","title":"<code>AROON_DOWN</code> \u2014 Aroon Down Trading Series","text":"<p>The <code>AROON_DOWN</code> trading series represents the Aroon Down indicator, which measures how long it has been since the lowest low during a specified period. It is primarily used to detect the strength of a downtrend.</p> <p>It is built upon the Aroon Down indicator implementation from the indicators module.</p>"},{"location":"dev/modules/trading_series/aroon_down/#parameters","title":"Parameters","text":"<pre><code>AROON_DOWN(\n    ticker: str,\n    length: int = 14\n)\n</code></pre> <ul> <li><code>ticker</code> (<code>str</code>): The symbol of the asset (e.g., <code>\"AAPL\"</code>).</li> <li><code>length</code> (<code>int</code>): The number of periods over which to calculate the Aroon Down indicator. Default is 14.</li> </ul>"},{"location":"dev/modules/trading_series/aroon_down/#description","title":"Description","text":"<ul> <li>Values close to 100 indicate a strong downtrend.</li> <li>Values near 0 suggest a weak or non-existent downtrend.</li> <li>Often used alongside the Aroon Up indicator to detect trend reversals.</li> </ul>"},{"location":"dev/modules/trading_series/aroon_down/#example-usage","title":"Example Usage","text":"<pre><code>AROON_DOWN(\n    ticker=\"AAPL\",\n    length=14\n)\n</code></pre> <p>This creates an Aroon Down Trading Series for AAPL using a 14-period lookback window.</p>"},{"location":"dev/modules/trading_series/aroon_up/","title":"<code>AROON_UP</code> \u2014 Aroon Up Trading Series","text":"<p>The <code>AROON_UP</code> trading series represents the Aroon Up indicator, which measures how long it has been since the highest high during a specified period. It is primarily used to detect the strength of an uptrend.</p> <p>It is built upon the Aroon Up indicator implementation from the indicators module.</p>"},{"location":"dev/modules/trading_series/aroon_up/#parameters","title":"Parameters","text":"<pre><code>AROON_UP(\n    ticker: str,\n    length: int = 14\n)\n</code></pre> <ul> <li> <p><code>ticker</code> (<code>str</code>): The symbol of the asset (e.g., <code>\"AAPL\"</code>).</p> </li> <li> <p><code>length</code> (<code>int</code>): The number of periods over which to calculate the Aroon Up indicator. Default is 14.</p> </li> </ul>"},{"location":"dev/modules/trading_series/aroon_up/#description","title":"Description","text":"<ul> <li>Values close to 100 indicate a strong uptrend.</li> <li>Values near 0 suggest a weak or non-existent uptrend.</li> <li>Often used alongside the Aroon Down indicator to detect trend reversals.</li> </ul>"},{"location":"dev/modules/trading_series/aroon_up/#example-usage","title":"Example Usage","text":"<pre><code>AROON_UP(\n    ticker=\"AAPL\",\n    length=14\n)\n</code></pre> <p>This creates an Aroon Up Trading Series for AAPL using a 14-period lookback window.</p>"},{"location":"dev/modules/trading_series/atr/","title":"<code>ATR</code> \u2014 Average True Range Trading Series","text":"<p>The <code>ATR</code> trading series represents the Average True Range (ATR) indicator, which measures market volatility by decomposing the entire range of an asset price for a given period.</p> <p>It is built upon the ATR indicator implementation from the indicators module.</p>"},{"location":"dev/modules/trading_series/atr/#parameters","title":"Parameters","text":"<pre><code>ATR(\n    ticker: str,\n    length: int = 14,\n    smoothing_type: SmoothingType = SmoothingType.RMA\n)\n</code></pre> <ul> <li> <p><code>ticker</code> (<code>str</code>): The symbol of the asset (e.g., <code>\"AAPL\"</code>).</p> </li> <li> <p><code>length</code> (<code>int</code>): The number of periods over which to calculate the ATR. Default is 14, a common setting in technical analysis.</p> </li> <li> <p><code>smoothing_type</code> (<code>SmoothingType</code>): The type of smoothing applied to the true range. Default is <code>SmoothingType.RMA</code>. Supported smoothing types are linked here.</p> </li> </ul>"},{"location":"dev/modules/trading_series/atr/#description","title":"Description","text":"<ul> <li>The ATR is a volatility indicator showing how much an asset moves, on average, during a given time frame.</li> <li>A rising ATR indicates increased volatility; a falling ATR suggests decreased volatility.</li> <li>ATR is often used to position size adjustments, stop loss calculations, or as a volatility filter in trading strategies.</li> </ul>"},{"location":"dev/modules/trading_series/atr/#example-usage","title":"Example Usage","text":"<pre><code>ATR(\n    ticker=\"AAPL\",\n    length=14,\n    smoothing_type=SmoothingType.RMA\n)\n</code></pre> <p>This creates an ATR Trading Series for AAPL using a 14-period length and RMA smoothing by default.</p>"},{"location":"dev/modules/trading_series/bb_lower/","title":"<code>BB_LOWER</code> \u2014 Bollinger Band Lower Trading Series","text":"<p>The <code>BB_LOWER</code> trading series represents the Lower Bollinger Band, calculated using a specified moving average and a standard deviation multiplier. It defines the lower boundary of the expected price range.</p> <p>It is built upon the Bollinger Bands indicator implementation from the indicators module.</p>"},{"location":"dev/modules/trading_series/bb_lower/#parameters","title":"Parameters","text":"<pre><code>BB_LOWER(\n    ticker: str,\n    source: SourceType = SourceType.CLOSE,\n    length: int = 20,\n    ma_type: SmoothingType = SmoothingType.SMA,\n    std_dev: float = 2,\n    offset: int = 0\n)\n</code></pre> <ul> <li><code>ticker</code> (<code>str</code>): Asset ticker symbol (e.g., <code>\"AAPL\"</code>).</li> <li><code>source</code> (<code>SourceType</code>): The price type to use. Default is <code>SourceType.CLOSE</code>. Supported sources are linked here.</li> <li><code>length</code> (<code>int</code>): Number of periods for the moving average. Default is 20.</li> <li><code>ma_type</code> (<code>SmoothingType</code>): Moving average type. Default is <code>SmoothingType.SMA</code>. Supported smoothing types are linked here.</li> <li><code>std_dev</code> (<code>float</code>): Number of standard deviations for the band. Default is 2.</li> <li><code>offset</code> (<code>int</code>): Shifts the band forwards/backwards. Default is 0.</li> </ul>"},{"location":"dev/modules/trading_series/bb_lower/#description","title":"Description","text":"<ul> <li>The lower Bollinger Band typically represents potential support levels.</li> <li>A close below the lower band may indicate an oversold condition or strong downside momentum.</li> </ul>"},{"location":"dev/modules/trading_series/bb_lower/#example-usage","title":"Example Usage","text":"<pre><code>BB_LOWER(\n    ticker=\"AAPL\",\n    source=SourceType.CLOSE,\n    length=20,\n    ma_type=SmoothingType.SMA,\n    std_dev=2,\n    offset=0\n)\n</code></pre>"},{"location":"dev/modules/trading_series/bb_middle/","title":"<code>BB_MIDDLE</code> \u2014 Bollinger Band Middle (Basis) Trading Series","text":"<p>The <code>BB_MIDDLE</code> trading series represents the middle band (basis) of the Bollinger Bands, calculated as a moving average over a specified period.</p> <p>It is built upon the Bollinger Bands indicator implementation from the indicators module.</p>"},{"location":"dev/modules/trading_series/bb_middle/#parameters","title":"Parameters","text":"<pre><code>BB_MIDDLE(\n    ticker: str,\n    source: SourceType = SourceType.CLOSE,\n    length: int = 20,\n    ma_type: SmoothingType = SmoothingType.SMA,\n    std_dev: float = 2,\n    offset: int = 0\n)\n</code></pre> <ul> <li><code>ticker</code> (<code>str</code>): Asset ticker symbol (e.g., <code>\"AAPL\"</code>).</li> <li><code>source</code> (<code>SourceType</code>): The price type to use. Default is <code>SourceType.CLOSE</code>. Supported sources are linked here.</li> <li><code>length</code> (<code>int</code>): Number of periods for the moving average. Default is 20.</li> <li><code>ma_type</code> (<code>SmoothingType</code>): Moving average type. Default is <code>SmoothingType.SMA</code>. Supported smoothing types are linked here.</li> <li><code>std_dev</code> (<code>float</code>): Number of standard deviations for the band. Default is 2.</li> <li><code>offset</code> (<code>int</code>): Shifts the band forwards/backwards. Default is 0.</li> </ul>"},{"location":"dev/modules/trading_series/bb_middle/#description","title":"Description","text":"<ul> <li>The middle Bollinger Band is the simple or smoothed moving average of the price.</li> <li>It acts as a central tendency measure around which the upper and lower bands expand and contract.</li> </ul>"},{"location":"dev/modules/trading_series/bb_middle/#example-usage","title":"Example Usage","text":"<pre><code>BB_MIDDLE(\n    ticker=\"AAPL\",\n    source=SourceType.CLOSE,\n    length=20,\n    ma_type=SmoothingType.SMA,\n    std_dev=2,\n    offset=0\n)\n</code></pre>"},{"location":"dev/modules/trading_series/bb_upper/","title":"<code>BB_UPPER</code> \u2014 Bollinger Band Upper Trading Series","text":"<p>The <code>BB_UPPER</code> trading series represents the Upper Bollinger Band, calculated using a specified moving average and a standard deviation multiplier. It defines the upper boundary of the expected price range.</p> <p>It is built upon the Bollinger Bands indicator implementation from the indicators module.</p>"},{"location":"dev/modules/trading_series/bb_upper/#parameters","title":"Parameters","text":"<pre><code>BB_UPPER(\n    ticker: str,\n    source: SourceType = SourceType.CLOSE,\n    length: int = 20,\n    ma_type: SmoothingType = SmoothingType.SMA,\n    std_dev: float = 2,\n    offset: int = 0\n)\n</code></pre> <ul> <li><code>ticker</code> (<code>str</code>): Asset ticker symbol (e.g., <code>\"AAPL\"</code>).</li> <li><code>source</code> (<code>SourceType</code>): The price type to use. Default is <code>SourceType.CLOSE</code>. Supported sources are linked here.</li> <li><code>length</code> (<code>int</code>): Number of periods for the moving average. Default is 20.</li> <li><code>ma_type</code> (<code>SmoothingType</code>): Moving average type. Default is <code>SmoothingType.SMA</code>. Supported smoothing types are linked here.</li> <li><code>std_dev</code> (<code>float</code>): Number of standard deviations for the band. Default is 2.</li> <li><code>offset</code> (<code>int</code>): Shifts the band forwards/backwards. Default is 0.</li> </ul>"},{"location":"dev/modules/trading_series/bb_upper/#description","title":"Description","text":"<ul> <li>The upper Bollinger Band typically represents potential resistance levels.</li> <li>A close above the upper band may indicate an overbought condition or strong upside momentum.</li> </ul>"},{"location":"dev/modules/trading_series/bb_upper/#example-usage","title":"Example Usage","text":"<pre><code>BB_UPPER(\n    ticker=\"AAPL\",\n    source=SourceType.CLOSE,\n    length=20,\n    ma_type=SmoothingType.SMA,\n    std_dev=2,\n    offset=0\n)\n</code></pre>"},{"location":"dev/modules/trading_series/bbp/","title":"<code>BBP</code> \u2014 Bull and Bear Power Trading Series","text":"<p>The <code>BBP</code> trading series represents the Bull and Bear Power (BBP) indicator, which helps assess the relative positioning of the price within the Bollinger Bands. It is a measure of market momentum and volatility.</p> <p>It is built upon the Bull and Bear Power indicator implementation from the indicators module.</p>"},{"location":"dev/modules/trading_series/bbp/#parameters","title":"Parameters","text":"<pre><code>BBP(\n    ticker: str,\n    length: int = 13\n)\n</code></pre> <ul> <li> <p><code>ticker</code> (<code>str</code>): The symbol of the asset (e.g., <code>\"AAPL\"</code>).</p> </li> <li> <p><code>length</code> (<code>int</code>): The period used to calculate the underlying Bollinger Bands. Default is 13, which is a common setting.</p> </li> </ul>"},{"location":"dev/modules/trading_series/bbp/#description","title":"Description","text":"<ul> <li>Positive BBP values indicate bulls have greater market power.</li> <li>Negative BBP values indicate bears have greater market power.</li> <li>The farther BBP moves from zero, the stronger the dominance of either bulls or bears.</li> </ul>"},{"location":"dev/modules/trading_series/bbp/#example-usage","title":"Example Usage","text":"<pre><code>BBP(\n    ticker=\"AAPL\",\n    length=13\n)\n</code></pre> <p>This creates a BBP Trading Series for AAPL using a 13-period setting.</p>"},{"location":"dev/modules/trading_series/cci/","title":"<code>CCI</code> \u2014 Commodity Channel Index Trading Series","text":"<p>The <code>CCI</code> trading series represents the Commodity Channel Index (CCI), an oscillator that measures the variation of an asset's price from its statistical mean.</p> <p>It is built upon the CCI indicator implementation from the indicators module.</p>"},{"location":"dev/modules/trading_series/cci/#parameters","title":"Parameters","text":"<pre><code>CCI(\n    ticker: str,\n    source: SourceType = SourceType.HLC3,\n    length: int = 20\n)\n</code></pre> <ul> <li><code>ticker</code> (<code>str</code>): Asset ticker symbol (e.g., <code>\"AAPL\"</code>).</li> <li><code>source</code> (<code>SourceType</code>): Price source to calculate CCI. Default is <code>SourceType.HLC3</code>. Supported sources are linked here.</li> <li><code>length</code> (<code>int</code>): Lookback period for CCI calculation. Default is 20.</li> </ul>"},{"location":"dev/modules/trading_series/cci/#description","title":"Description","text":"<ul> <li>CCI values above +100 may indicate overbought conditions.</li> <li>CCI values below -100 may indicate oversold conditions.</li> <li>CCI can be used to spot trend reversals, overbought/oversold levels, and strength of trends.</li> </ul>"},{"location":"dev/modules/trading_series/cci/#example-usage","title":"Example Usage","text":"<pre><code>CCI(\n    ticker=\"AAPL\",\n    source=SourceType.CLOSE,\n    length=20\n)\n</code></pre>"},{"location":"dev/modules/trading_series/cci_smoothened/","title":"<code>CCI_SMOOTHENED</code> \u2014 Smoothened Commodity Channel Index Trading Series","text":"<p>The <code>CCI_SMOOTHENED</code> trading series represents a smoothed version of the Commodity Channel Index (CCI), offering a less noisy view of price movements.</p> <p>It is built upon the CCI Smoothened indicator implementation from the indicators module.</p>"},{"location":"dev/modules/trading_series/cci_smoothened/#parameters","title":"Parameters","text":"<pre><code>CCI_SMOOTHENED(\n    ticker: str,\n    source: SourceType = SourceType.HLC3,\n    length: int = 20,\n    smoothing_type: SmoothingType = SmoothingType.RMA,\n    smoothing_length: int = 5\n)\n</code></pre> <ul> <li><code>ticker</code> (<code>str</code>): Asset ticker symbol (e.g., <code>\"AAPL\"</code>).</li> <li><code>source</code> (<code>SourceType</code>):   Price source to calculate CCI. Default is <code>SourceType.HLC3</code>. Supported sources are linked here.</li> <li><code>length</code> (<code>int</code>): Lookback period for base CCI calculation. Default is 20.</li> <li><code>smoothing_type</code> (<code>SmoothingType</code>): Type of smoothing applied to the CCI. Default is <code>SmoothingType.RMA</code>. Supported smoothing types are linked here.</li> <li><code>smoothing_length</code> (<code>int</code>): Period of smoothing. Default is 5.</li> </ul>"},{"location":"dev/modules/trading_series/cci_smoothened/#description","title":"Description","text":"<ul> <li>Helps reduce noise compared to regular CCI.</li> <li>Better suited for longer-term strategies and smoother signal generation.</li> </ul>"},{"location":"dev/modules/trading_series/cci_smoothened/#example-usage","title":"Example Usage","text":"<pre><code>CCI_SMOOTHENED(\n    ticker=\"AAPL\",\n    source=SourceType.CLOSE,\n    length=20,\n    smoothing_type=SmoothingType.RMA,\n    smoothing_length=5\n)\n</code></pre>"},{"location":"dev/modules/trading_series/chaikin_osc/","title":"<code>CHAIKIN_OSC</code> \u2014 Chaikin Oscillator Trading Series","text":"<p>The <code>CHAIKIN_OSC</code> trading series represents the Chaikin Oscillator, which measures the momentum of the Accumulation/Distribution Line of an asset.</p> <p>It is built upon the Chaikin Oscillator indicator implementation from the indicators module.</p>"},{"location":"dev/modules/trading_series/chaikin_osc/#parameters","title":"Parameters","text":"<pre><code>CHAIKIN_OSC(\n    ticker: str,\n    fast_length: int = 3,\n    slow_length: int = 10\n)\n</code></pre> <ul> <li><code>ticker</code> (<code>str</code>): Asset ticker symbol (e.g., <code>\"AAPL\"</code>).</li> <li><code>fast_length</code> (<code>int</code>): Fast EMA period. Default is 3.</li> <li><code>slow_length</code> (<code>int</code>): Slow EMA period. Default is 10.</li> </ul>"},{"location":"dev/modules/trading_series/chaikin_osc/#description","title":"Description","text":"<ul> <li>The Chaikin Oscillator calculates the difference between the 3-day and 10-day EMAs of the Accumulation/Distribution Line.</li> <li>Positive values suggest buying pressure; negative values suggest selling pressure.</li> <li>Useful for detecting shifts in money flow before price movements.</li> </ul>"},{"location":"dev/modules/trading_series/chaikin_osc/#example-usage","title":"Example Usage","text":"<pre><code>CHAIKIN_OSC(\n    ticker=\"AAPL\",\n    fast_length=3,\n    slow_length=10\n)\n</code></pre>"},{"location":"dev/modules/trading_series/chop/","title":"<code>CHOP</code> \u2014 Choppiness Index Trading Series","text":"<p>The <code>CHOP</code> trading series represents the Choppiness Index, an indicator used to determine if the market is trading sideways (choppy) or trending strongly.</p> <p>It is built upon the Choppiness Index indicator implementation from the indicators module.</p>"},{"location":"dev/modules/trading_series/chop/#parameters","title":"Parameters","text":"<pre><code>CHOP(\n    ticker: str,\n    length: int = 14,\n    offset: int = 0\n)\n</code></pre> <ul> <li><code>ticker</code> (<code>str</code>): Asset ticker symbol (e.g., <code>\"AAPL\"</code>).</li> <li><code>length</code> (<code>int</code>): Lookback period for the Choppiness Index calculation. Default is 14.</li> <li><code>offset</code> (<code>int</code>): Offset for shifting the resulting series. Default is 0.</li> </ul>"},{"location":"dev/modules/trading_series/chop/#description","title":"Description","text":"<ul> <li>Values near 100 indicate very sideways/choppy price action.</li> <li>Values near 0 suggest strong directional trending.</li> <li>CHOP helps determine whether to favor trend-following or mean-reverting strategies.</li> </ul>"},{"location":"dev/modules/trading_series/chop/#example-usage","title":"Example Usage","text":"<pre><code>CHOP(\n    ticker=\"AAPL\",\n    length=14,\n    offset=0\n)\n</code></pre>"},{"location":"dev/modules/trading_series/cmf/","title":"<code>CMF</code> \u2014 Chaikin Money Flow Trading Series","text":"<p>The <code>CMF</code> trading series represents the Chaikin Money Flow indicator, which measures the volume-weighted average of accumulation and distribution over a specified period.</p> <p>It is built upon the Chaikin Money Flow indicator implementation from the indicators module.</p>"},{"location":"dev/modules/trading_series/cmf/#parameters","title":"Parameters","text":"<pre><code>CMF(\n    ticker: str,\n    length: int = 20\n)\n</code></pre> <ul> <li><code>ticker</code> (<code>str</code>): Asset ticker symbol (e.g., <code>\"AAPL\"</code>).</li> <li><code>length</code> (<code>int</code>): Lookback period for calculating CMF. Default is 20.</li> </ul>"},{"location":"dev/modules/trading_series/cmf/#description","title":"Description","text":"<ul> <li>Positive CMF values suggest buying pressure (accumulation).</li> <li>Negative CMF values suggest selling pressure (distribution).</li> <li>Useful for confirming price trends and breakouts.</li> </ul>"},{"location":"dev/modules/trading_series/cmf/#example-usage","title":"Example Usage","text":"<pre><code>CMF(\n    ticker=\"AAPL\",\n    length=20\n)\n</code></pre>"},{"location":"dev/modules/trading_series/cmo/","title":"<code>CMO</code> \u2014 Chande Momentum Oscillator Trading Series","text":"<p>The <code>CMO</code> trading series represents the Chande Momentum Oscillator (CMO), which measures momentum on both the upside and downside over a specified period.</p> <p>It is built upon the Chande Momentum Oscillator indicator implementation from the indicators module.</p>"},{"location":"dev/modules/trading_series/cmo/#parameters","title":"Parameters","text":"<pre><code>CMO(\n    ticker: str,\n    source: SourceType = SourceType.CLOSE,\n    length: int = 20\n)\n</code></pre> <ul> <li><code>ticker</code> (<code>str</code>): Asset ticker symbol (e.g., <code>\"AAPL\"</code>).</li> <li><code>source</code> (<code>SourceType</code>): Price source to calculate the CMO. Default is <code>SourceType.CLOSE</code>. Supported sources are linked here.</li> <li><code>length</code> (<code>int</code>): Lookback period for the CMO calculation. Default is 20.</li> </ul>"},{"location":"dev/modules/trading_series/cmo/#description","title":"Description","text":"<ul> <li>CMO oscillates between -100 and +100.</li> <li>High positive values suggest strong upward momentum.</li> <li>High negative values suggest strong downward momentum.</li> <li>Helps identify overbought and oversold conditions.</li> </ul>"},{"location":"dev/modules/trading_series/cmo/#example-usage","title":"Example Usage","text":"<pre><code>CMO(\n    ticker=\"AAPL\",\n    source=SourceType.CLOSE,\n    length=20\n)\n</code></pre>"},{"location":"dev/modules/trading_series/coppock/","title":"<code>COPPOCK</code> \u2014 Coppock Curve Trading Series","text":"<p>The <code>COPPOCK</code> trading series represents the Coppock Curve, a momentum indicator developed for identifying major bottoms in markets.</p> <p>It is built upon the Coppock Curve indicator implementation from the indicators module.</p>"},{"location":"dev/modules/trading_series/coppock/#parameters","title":"Parameters","text":"<pre><code>COPPOCK(\n    ticker: str,\n    length: int = 10,\n    long_roc_length: int = 14,\n    short_roc_length: int = 11\n)\n</code></pre> <ul> <li><code>ticker</code> (<code>str</code>): Asset ticker symbol (e.g., <code>\"AAPL\"</code>).</li> <li><code>length</code> (<code>int</code>): Period for smoothing the rate of change. Default is 10.</li> <li><code>long_roc_length</code> (<code>int</code>): Long-term rate of change period. Default is 14.</li> <li><code>short_roc_length</code> (<code>int</code>): Short-term rate of change period. Default is 11.</li> </ul>"},{"location":"dev/modules/trading_series/coppock/#description","title":"Description","text":"<ul> <li>Coppock Curve was originally designed for identifying long-term buying opportunities.</li> <li>Positive curves suggest long opportunities; declining curves may indicate weakening momentum.</li> <li>Less sensitive to short-term noise.</li> </ul>"},{"location":"dev/modules/trading_series/coppock/#example-usage","title":"Example Usage","text":"<pre><code>COPPOCK(\n    ticker=\"AAPL\",\n    length=10,\n    long_roc_length=14,\n    short_roc_length=11\n)\n</code></pre>"},{"location":"dev/modules/trading_series/dc_basis/","title":"<code>DC_BASIS</code> \u2014 Donchian Channel Basis Trading Series","text":"<p>The <code>DC_BASIS</code> trading series represents the middle line (basis) of the Donchian Channel, calculated as the average of the upper and lower bands.</p> <p>It is built upon the Donchian Channel indicator implementation from the indicators module.</p>"},{"location":"dev/modules/trading_series/dc_basis/#parameters","title":"Parameters","text":"<pre><code>DC_BASIS(\n    ticker: str,\n    length: int = 20,\n    offset: int = 0\n)\n</code></pre> <ul> <li><code>ticker</code> (<code>str</code>): Asset ticker symbol (e.g., <code>\"AAPL\"</code>).</li> <li><code>length</code> (<code>int</code>): Lookback period for calculating the basis. Default is 20.</li> <li><code>offset</code> (<code>int</code>): Shifts the resulting series forward or backward. Default is 0.</li> </ul>"},{"location":"dev/modules/trading_series/dc_basis/#description","title":"Description","text":"<ul> <li>The basis line represents the average price between the Donchian upper and lower bands.</li> <li>Can be used as a mean reversion reference or dynamic support/resistance.</li> </ul>"},{"location":"dev/modules/trading_series/dc_basis/#example-usage","title":"Example Usage","text":"<pre><code>DC_BASIS(\n    ticker=\"AAPL\",\n    length=20,\n    offset=0\n)\n</code></pre>"},{"location":"dev/modules/trading_series/dc_lower/","title":"<code>DC_LOWER</code> \u2014 Donchian Channel Lower Band Trading Series","text":"<p>The <code>DC_LOWER</code> trading series represents the lower band of the Donchian Channel, calculated as the lowest low over a specified period.</p> <p>It is built upon the Donchian Channel indicator implementation from the indicators module.</p>"},{"location":"dev/modules/trading_series/dc_lower/#parameters","title":"Parameters","text":"<pre><code>DC_LOWER(\n    ticker: str,\n    length: int = 20,\n    offset: int = 0\n)\n</code></pre> <ul> <li><code>ticker</code> (<code>str</code>): Asset ticker symbol (e.g., <code>\"AAPL\"</code>).</li> <li><code>length</code> (<code>int</code>): Lookback period for the lowest low calculation. Default is 20.</li> <li><code>offset</code> (<code>int</code>): Shifts the resulting series forward or backward. Default is 0.</li> </ul>"},{"location":"dev/modules/trading_series/dc_lower/#description","title":"Description","text":"<ul> <li>The lower Donchian Channel marks the lowest price observed over the last <code>length</code> periods.</li> <li>Helps identify potential support zones or breakout levels.</li> </ul>"},{"location":"dev/modules/trading_series/dc_lower/#example-usage","title":"Example Usage","text":"<pre><code>DC_LOWER(\n    ticker=\"AAPL\",\n    length=20,\n    offset=0\n)\n</code></pre>"},{"location":"dev/modules/trading_series/dc_upper/","title":"<code>DC_UPPER</code> \u2014 Donchian Channel Upper Band Trading Series","text":"<p>The <code>DC_UPPER</code> trading series represents the upper band of the Donchian Channel, calculated as the highest high over a specified period.</p> <p>It is built upon the Donchian Channel indicator implementation from the indicators module.</p>"},{"location":"dev/modules/trading_series/dc_upper/#parameters","title":"Parameters","text":"<pre><code>DC_UPPER(\n    ticker: str,\n    length: int = 20,\n    offset: int = 0\n)\n</code></pre> <ul> <li><code>ticker</code> (<code>str</code>): Asset ticker symbol (e.g., <code>\"AAPL\"</code>).</li> <li><code>length</code> (<code>int</code>): Lookback period for the highest high calculation. Default is 20.</li> <li><code>offset</code> (<code>int</code>): Shifts the resulting series forward or backward. Default is 0.</li> </ul>"},{"location":"dev/modules/trading_series/dc_upper/#description","title":"Description","text":"<ul> <li>The upper Donchian Channel marks the highest price observed over the last <code>length</code> periods.</li> <li>Useful for spotting breakout opportunities and setting resistance zones.</li> </ul>"},{"location":"dev/modules/trading_series/dc_upper/#example-usage","title":"Example Usage","text":"<pre><code>DC_UPPER(\n    ticker=\"AAPL\",\n    length=20,\n    offset=0\n)\n</code></pre>"},{"location":"dev/modules/trading_series/default/","title":"Default Trading Series","text":"<p>The <code>default_series</code> module provides basic fundamental trading series like Open, High, Low, Close, Volume, and constant values. These series are used to build simple conditions and combine with more complex indicators.</p>"},{"location":"dev/modules/trading_series/default/#close-closing-price-trading-series","title":"<code>CLOSE</code> - Closing Price Trading Series","text":"<p>Represents the closing price of a given ticker.</p>"},{"location":"dev/modules/trading_series/default/#parameters","title":"Parameters","text":"<pre><code>CLOSE(\n    ticker: str\n)\n</code></pre> <ul> <li><code>ticker</code> (<code>str</code>):   Asset ticker symbol (e.g., <code>\"AAPL\"</code>).</li> </ul>"},{"location":"dev/modules/trading_series/default/#description","title":"Description","text":"<ul> <li>Retrieves the close prices for the given ticker from the historical dataset.</li> <li>Used in the majority of trading indicators and strategies.</li> </ul>"},{"location":"dev/modules/trading_series/default/#example-usage","title":"Example Usage","text":"<pre><code>CLOSE(ticker=\"AAPL\")\n</code></pre>"},{"location":"dev/modules/trading_series/default/#open-opening-price-trading-series","title":"<code>OPEN</code> - Opening Price Trading Series","text":"<p>Represents the opening price of a given ticker.</p>"},{"location":"dev/modules/trading_series/default/#parameters_1","title":"Parameters","text":"<pre><code>OPEN(\n    ticker: str\n)\n</code></pre> <ul> <li><code>ticker</code> (<code>str</code>):   Asset ticker symbol (e.g., <code>\"AAPL\"</code>).</li> </ul>"},{"location":"dev/modules/trading_series/default/#description_1","title":"Description","text":"<ul> <li>Retrieves the opening prices for the given ticker from the historical dataset.</li> </ul>"},{"location":"dev/modules/trading_series/default/#example-usage_1","title":"Example Usage","text":"<pre><code>OPEN(ticker=\"AAPL\")\n</code></pre>"},{"location":"dev/modules/trading_series/default/#high-highest-price-trading-series","title":"<code>HIGH</code> - Highest Price Trading Series","text":"<p>Represents the highest price reached during a trading period.</p>"},{"location":"dev/modules/trading_series/default/#parameters_2","title":"Parameters","text":"<pre><code>HIGH(\n    ticker: str\n)\n</code></pre> <ul> <li><code>ticker</code> (<code>str</code>):   Asset ticker symbol (e.g., <code>\"AAPL\"</code>).</li> </ul>"},{"location":"dev/modules/trading_series/default/#description_2","title":"Description","text":"<ul> <li>Retrieves the high prices for the given ticker from the historical dataset.</li> </ul>"},{"location":"dev/modules/trading_series/default/#example-usage_2","title":"Example Usage","text":"<pre><code>HIGH(ticker=\"AAPL\")\n</code></pre>"},{"location":"dev/modules/trading_series/default/#low-lowest-price-trading-series","title":"<code>LOW</code> - Lowest Price Trading Series","text":"<p>Represents the lowest price reached during a trading period.</p>"},{"location":"dev/modules/trading_series/default/#parameters_3","title":"Parameters","text":"<pre><code>LOW(\n    ticker: str\n)\n</code></pre> <ul> <li><code>ticker</code> (<code>str</code>):   Asset ticker symbol (e.g., <code>\"AAPL\"</code>).</li> </ul>"},{"location":"dev/modules/trading_series/default/#description_3","title":"Description","text":"<ul> <li>Retrieves the low prices for the given ticker from the historical dataset.</li> </ul>"},{"location":"dev/modules/trading_series/default/#example-usage_3","title":"Example Usage","text":"<pre><code>LOW(ticker=\"AAPL\")\n</code></pre>"},{"location":"dev/modules/trading_series/default/#volume-volume-trading-series","title":"<code>VOLUME</code> - Volume Trading Series","text":"<p>Represents the number of shares or contracts traded during a trading period.</p>"},{"location":"dev/modules/trading_series/default/#parameters_4","title":"Parameters","text":"<pre><code>VOLUME(\n    ticker: str\n)\n</code></pre> <ul> <li><code>ticker</code> (<code>str</code>):   Asset ticker symbol (e.g., <code>\"AAPL\"</code>).</li> </ul>"},{"location":"dev/modules/trading_series/default/#description_4","title":"Description","text":"<ul> <li>Retrieves the traded volume for the given ticker from the historical dataset.</li> </ul>"},{"location":"dev/modules/trading_series/default/#example-usage_4","title":"Example Usage","text":"<pre><code>VOLUME(ticker=\"AAPL\")\n</code></pre>"},{"location":"dev/modules/trading_series/default/#const-constant-value-trading-series","title":"<code>CONST</code> - Constant Value Trading Series","text":"<p>Represents a constant value series, independent of the asset prices.</p>"},{"location":"dev/modules/trading_series/default/#parameters_5","title":"Parameters","text":"<pre><code>CONST(\n    const_number: int\n)\n</code></pre> <ul> <li><code>const_number</code> (<code>int</code>):   A constant numeric value (e.g., 30, 70, 100).</li> </ul>"},{"location":"dev/modules/trading_series/default/#description_5","title":"Description","text":"<ul> <li>Useful for defining static thresholds in conditions (e.g., RSI crossing 70).</li> <li>Returns a constant series for comparison with dynamic indicators.</li> </ul>"},{"location":"dev/modules/trading_series/default/#example-usage_5","title":"Example Usage","text":"<pre><code>CONST(70)\n</code></pre>"},{"location":"dev/modules/trading_series/di_minus/","title":"<code>DI_MINUS</code> \u2014 Negative Directional Indicator (-DI) Trading Series","text":"<p>The <code>DI_MINUS</code> trading series represents the Negative Directional Indicator (-DI), a component of the ADX system that measures downward price movement strength.</p> <p>It is built upon the Directional Movement Index (-DI) implementation from the indicators module.</p>"},{"location":"dev/modules/trading_series/di_minus/#parameters","title":"Parameters","text":"<pre><code>DI_MINUS(\n    ticker: str,\n    length: int = 14\n)\n</code></pre> <ul> <li><code>ticker</code> (<code>str</code>): Asset ticker symbol (e.g., <code>\"AAPL\"</code>).</li> <li><code>length</code> (<code>int</code>): Lookback period to calculate the -DI. Default is 14.</li> </ul>"},{"location":"dev/modules/trading_series/di_minus/#description","title":"Description","text":"<ul> <li>Higher -DI values suggest stronger downward movement.</li> <li>Often combined with +DI and ADX to assess overall trend strength and direction.</li> </ul>"},{"location":"dev/modules/trading_series/di_minus/#example-usage","title":"Example Usage","text":"<pre><code>DI_MINUS(\n    ticker=\"AAPL\",\n    length=14\n)\n</code></pre>"},{"location":"dev/modules/trading_series/di_plus/","title":"<code>DI_PLUS</code> \u2014 Positive Directional Indicator (+DI) Trading Series","text":"<p>The <code>DI_PLUS</code> trading series represents the Positive Directional Indicator (+DI), a component of the ADX system that measures upward price movement strength.</p> <p>It is built upon the Directional Movement Index (+DI) implementation from the indicators module.</p>"},{"location":"dev/modules/trading_series/di_plus/#parameters","title":"Parameters","text":"<pre><code>DI_PLUS(\n    ticker: str,\n    length: int = 14\n)\n</code></pre> <ul> <li><code>ticker</code> (<code>str</code>): Asset ticker symbol (e.g., <code>\"AAPL\"</code>).</li> <li><code>length</code> (<code>int</code>): Lookback period to calculate the +DI. Default is 14.</li> </ul>"},{"location":"dev/modules/trading_series/di_plus/#description","title":"Description","text":"<ul> <li>Higher +DI values suggest stronger upward movement.</li> <li>Often combined with -DI and ADX to assess overall trend strength and direction.</li> </ul>"},{"location":"dev/modules/trading_series/di_plus/#example-usage","title":"Example Usage","text":"<pre><code>DI_PLUS(\n    ticker=\"AAPL\",\n    length=14\n)\n</code></pre>"},{"location":"dev/modules/trading_series/dpo/","title":"<code>DPO</code> \u2014 Detrended Price Oscillator Trading Series","text":"<p>The <code>DPO</code> trading series represents the Detrended Price Oscillator, used to remove long-term trends from prices and focus on short-term cycles.</p> <p>It is built upon the Detrended Price Oscillator indicator implementation from the indicators module.</p>"},{"location":"dev/modules/trading_series/dpo/#parameters","title":"Parameters","text":"<pre><code>DPO(\n    ticker: str,\n    length: int = 20\n)\n</code></pre> <ul> <li><code>ticker</code> (<code>str</code>): Asset ticker symbol (e.g., <code>\"AAPL\"</code>).</li> <li><code>length</code> (<code>int</code>): Lookback period to detrend the price series. Default is 20.</li> </ul>"},{"location":"dev/modules/trading_series/dpo/#description","title":"Description","text":"<ul> <li>Helps identify short-term cycles without the influence of larger trends.</li> <li>Useful for timing entries and exits based on price oscillations.</li> </ul>"},{"location":"dev/modules/trading_series/dpo/#example-usage","title":"Example Usage","text":"<pre><code>DPO(\n    ticker=\"AAPL\",\n    length=20\n)\n</code></pre>"},{"location":"dev/modules/trading_series/efi/","title":"<code>EFI</code> \u2014 Elder Force Index Trading Series","text":"<p>The <code>EFI</code> trading series represents the Elder Force Index, a volume-based momentum indicator that quantifies buying and selling pressure.</p> <p>It is built upon the Elder Force Index indicator implementation from the indicators module.</p>"},{"location":"dev/modules/trading_series/efi/#parameters","title":"Parameters","text":"<pre><code>EFI(\n    ticker: str,\n    length: int = 13\n)\n</code></pre> <ul> <li><code>ticker</code> (<code>str</code>): Asset ticker symbol (e.g., <code>\"AAPL\"</code>).</li> <li><code>length</code> (<code>int</code>): Period for smoothing the raw Force Index. Default is 13.</li> </ul>"},{"location":"dev/modules/trading_series/efi/#description","title":"Description","text":"<ul> <li>Positive EFI values indicate buying pressure.</li> <li>Negative EFI values indicate selling pressure.</li> <li>Combines price change and volume for a powerful momentum signal.</li> </ul>"},{"location":"dev/modules/trading_series/efi/#example-usage","title":"Example Usage","text":"<pre><code>EFI(\n    ticker=\"AAPL\",\n    length=13\n)\n</code></pre>"},{"location":"dev/modules/trading_series/eom/","title":"<code>EOM</code> \u2014 Ease of Movement Trading Series","text":"<p>The <code>EOM</code> trading series represents the Ease of Movement indicator, which combines price and volume to measure the ease with which an asset's price moves.</p> <p>It is built upon the Ease of Movement indicator implementation from the indicators module.</p>"},{"location":"dev/modules/trading_series/eom/#parameters","title":"Parameters","text":"<pre><code>EOM(\n    ticker: str,\n    length: int = 14,\n    divisor: int = 10_000\n)\n</code></pre> <ul> <li><code>ticker</code> (<code>str</code>): Asset ticker symbol (e.g., <code>\"AAPL\"</code>).</li> <li><code>length</code> (<code>int</code>): Period for smoothing the raw Ease of Movement calculation. Default is 14.</li> <li><code>divisor</code> (<code>int</code>): Divisor applied to reduce scaling issues. Default is 10,000.</li> </ul>"},{"location":"dev/modules/trading_series/eom/#description","title":"Description","text":"<ul> <li>EOM measures how much volume is required to move prices.</li> <li>High positive values suggest easy upward movement; low negative values suggest easy downward movement.</li> </ul>"},{"location":"dev/modules/trading_series/eom/#example-usage","title":"Example Usage","text":"<pre><code>EOM(\n    ticker=\"AAPL\",\n    length=14,\n    divisor=10_000\n)\n</code></pre>"},{"location":"dev/modules/trading_series/hammer/","title":"<code>HAMMER</code> \u2014 Hammer Candlestick Pattern Trading Series","text":"<p>The <code>HAMMER</code> trading series detects the Hammer candlestick pattern, a potential bullish reversal pattern appearing after a downtrend.</p> <p>It is built upon the Hammer pattern detection implementation from the indicators module.</p>"},{"location":"dev/modules/trading_series/hammer/#parameters","title":"Parameters","text":"<pre><code>HAMMER(\n    ticker: str\n)\n</code></pre> <ul> <li><code>ticker</code> (<code>str</code>): Asset ticker symbol (e.g., <code>\"AAPL\"</code>).</li> </ul>"},{"location":"dev/modules/trading_series/hammer/#description","title":"Description","text":"<ul> <li>The Hammer is characterized by a small real body and a long lower shadow.</li> <li>It indicates potential exhaustion of selling pressure and a possible trend reversal to the upside.</li> </ul>"},{"location":"dev/modules/trading_series/hammer/#example-usage","title":"Example Usage","text":"<pre><code>HAMMER(\n    ticker=\"AAPL\"\n)\n</code></pre>"},{"location":"dev/modules/trading_series/ichimoku_series/","title":"Ichimoku Trading Series","text":"<p>The <code>Ichimoku</code> trading series provides various components of the Ichimoku Kinko Hyo system, a comprehensive trading framework offering trend direction, momentum, and support/resistance levels.</p>"},{"location":"dev/modules/trading_series/ichimoku_series/#ichimoku_base-ichimoku-base-line","title":"<code>ICHIMOKU_BASE</code> - Ichimoku Base Line","text":"<p>Represents the Base Line (Kijun-sen) \u2014 a key slower-moving line in the Ichimoku system.</p>"},{"location":"dev/modules/trading_series/ichimoku_series/#parameters","title":"Parameters","text":"<pre><code>ICHIMOKU_BASE(\n    ticker: str,\n    length: int = 26\n)\n</code></pre> <ul> <li><code>ticker</code> (<code>str</code>):   Asset ticker symbol (e.g., <code>\"AAPL\"</code>).</li> <li><code>length</code> (<code>int</code>):   Lookback period for calculation. Default is 26.</li> </ul>"},{"location":"dev/modules/trading_series/ichimoku_series/#description","title":"Description","text":"<ul> <li>Midpoint between the highest high and lowest low over the past <code>length</code> periods.</li> <li>Often used as a trailing stop or dynamic support/resistance.</li> </ul>"},{"location":"dev/modules/trading_series/ichimoku_series/#example-usage","title":"Example Usage","text":"<pre><code>ICHIMOKU_BASE(ticker=\"AAPL\", length=26)\n</code></pre>"},{"location":"dev/modules/trading_series/ichimoku_series/#ichimoku_conversion-ichimoku-conversion-line","title":"<code>ICHIMOKU_CONVERSION</code> - Ichimoku Conversion Line","text":"<p>Represents the Conversion Line (Tenkan-sen) \u2014 a faster-reacting line compared to the Base Line.</p>"},{"location":"dev/modules/trading_series/ichimoku_series/#parameters_1","title":"Parameters","text":"<pre><code>ICHIMOKU_CONVERSION(\n    ticker: str,\n    length: int = 9\n)\n</code></pre> <ul> <li><code>ticker</code> (<code>str</code>):   Asset ticker symbol.</li> <li><code>length</code> (<code>int</code>):   Lookback period for calculation. Default is 9.</li> </ul>"},{"location":"dev/modules/trading_series/ichimoku_series/#description_1","title":"Description","text":"<ul> <li>Midpoint between the highest high and lowest low over the past <code>length</code> periods.</li> <li>Useful for identifying short-term trend changes.</li> </ul>"},{"location":"dev/modules/trading_series/ichimoku_series/#example-usage_1","title":"Example Usage","text":"<pre><code>ICHIMOKU_CONVERSION(ticker=\"AAPL\", length=9)\n</code></pre>"},{"location":"dev/modules/trading_series/ichimoku_series/#ichimoku_leading_span_a-ichimoku-leading-span-a","title":"<code>ICHIMOKU_LEADING_SPAN_A</code> - Ichimoku Leading Span A","text":"<p>Represents Senkou Span A \u2014 one of the two edges of the Kumo (cloud).</p>"},{"location":"dev/modules/trading_series/ichimoku_series/#parameters_2","title":"Parameters","text":"<pre><code>ICHIMOKU_LEADING_SPAN_A(\n    ticker: str,\n    displacement: int = 26\n)\n</code></pre> <ul> <li><code>ticker</code> (<code>str</code>):   Asset ticker symbol.</li> <li><code>displacement</code> (<code>int</code>):   Forward shift into the future. Default is 26.</li> </ul>"},{"location":"dev/modules/trading_series/ichimoku_series/#description_2","title":"Description","text":"<ul> <li>Average of the Conversion Line and Base Line.</li> <li>Plotted <code>displacement</code> periods ahead to form one edge of the cloud.</li> </ul>"},{"location":"dev/modules/trading_series/ichimoku_series/#example-usage_2","title":"Example Usage","text":"<pre><code>ICHIMOKU_LEADING_SPAN_A(ticker=\"AAPL\", displacement=26)\n</code></pre>"},{"location":"dev/modules/trading_series/ichimoku_series/#ichimoku_leading_span_b-ichimoku-leading-span-b","title":"<code>ICHIMOKU_LEADING_SPAN_B</code> - Ichimoku Leading Span B","text":"<p>Represents Senkou Span B \u2014 the second edge of the Kumo.</p>"},{"location":"dev/modules/trading_series/ichimoku_series/#parameters_3","title":"Parameters","text":"<pre><code>ICHIMOKU_LEADING_SPAN_B(\n    ticker: str,\n    length: int = 52,\n    displacement: int = 26\n)\n</code></pre> <ul> <li><code>ticker</code> (<code>str</code>):   Asset ticker symbol.</li> <li><code>length</code> (<code>int</code>):   Lookback period for Span B. Default is 52.</li> <li><code>displacement</code> (<code>int</code>):   Forward shift into the future. Default is 26.</li> </ul>"},{"location":"dev/modules/trading_series/ichimoku_series/#description_3","title":"Description","text":"<ul> <li>Midpoint between the highest high and lowest low over the last <code>length</code> periods.</li> <li>Forms the second boundary of the cloud (Kumo).</li> </ul>"},{"location":"dev/modules/trading_series/ichimoku_series/#example-usage_3","title":"Example Usage","text":"<pre><code>ICHIMOKU_LEADING_SPAN_B(ticker=\"AAPL\", length=52, displacement=26)\n</code></pre>"},{"location":"dev/modules/trading_series/ichimoku_series/#ichimoku_lagging_span-ichimoku-lagging-span","title":"<code>ICHIMOKU_LAGGING_SPAN</code> - Ichimoku Lagging Span","text":"<p>Represents the Lagging Span (Chikou Span) \u2014 a backward-shifted closing price.</p>"},{"location":"dev/modules/trading_series/ichimoku_series/#parameters_4","title":"Parameters","text":"<pre><code>ICHIMOKU_LAGGING_SPAN(\n    ticker: str,\n    displacement: int = 26\n)\n</code></pre> <ul> <li><code>ticker</code> (<code>str</code>):   Asset ticker symbol.</li> <li><code>displacement</code> (<code>int</code>):   Number of periods the close is shifted backward. Default is 26.</li> </ul>"},{"location":"dev/modules/trading_series/ichimoku_series/#description_4","title":"Description","text":"<ul> <li>Closing price shifted back <code>displacement</code> periods.</li> <li>Used for confirmation of trend direction.</li> </ul>"},{"location":"dev/modules/trading_series/ichimoku_series/#example-usage_4","title":"Example Usage","text":"<pre><code>ICHIMOKU_LAGGING_SPAN(ticker=\"AAPL\", displacement=26)\n</code></pre>"},{"location":"dev/modules/trading_series/kc_lower/","title":"<code>KC_LOWER</code> \u2014 Keltner Channel Lower Band Trading Series","text":"<p>The <code>KC_LOWER</code> trading series represents the lower band of the Keltner Channel, based on a moving average and the Average True Range (ATR).</p> <p>It is built upon the Keltner Channel indicator implementation from the indicators module.</p>"},{"location":"dev/modules/trading_series/kc_lower/#parameters","title":"Parameters","text":"<pre><code>KC_LOWER(\n    ticker: str,\n    source: SourceType = SouceType.CLOSE,\n    length: int = 20,\n    multiplier: int = 2,\n    use_exp_ma: bool = True,\n    atr_length: int = 10\n)\n</code></pre> <ul> <li><code>ticker</code> (<code>str</code>): Asset ticker symbol (e.g., <code>\"AAPL\"</code>).</li> <li><code>source</code> (<code>SourceType</code>): Price source used for moving average. Default is <code>SourceType.CLOSE</code>. Supported sources are linked here.</li> <li><code>length</code> (<code>int</code>): Period for the moving average. Default is 20.</li> <li><code>multiplier</code> (<code>int</code>): Multiplier applied to the ATR for band width. Default is 2.</li> <li><code>use_exp_ma</code> (<code>bool</code>): Whether to use an Exponential Moving Average (EMA) instead of SMA. Default is <code>True</code>.</li> <li><code>atr_length</code> (<code>int</code>): Period for ATR calculation. Default is 10.</li> </ul>"},{"location":"dev/modules/trading_series/kc_lower/#description","title":"Description","text":"<ul> <li>The lower Keltner Channel typically serves as dynamic support.</li> <li>Built around an ATR-enveloped moving average.</li> </ul>"},{"location":"dev/modules/trading_series/kc_lower/#example-usage","title":"Example Usage","text":"<pre><code>KC_LOWER(\n    ticker=\"AAPL\",\n    source=SourceType.CLOSE,\n    length=20,\n    multiplier=2,\n    use_exp_ma=True,\n    atr_length=10\n)\n</code></pre>"},{"location":"dev/modules/trading_series/kc_upper/","title":"<code>KC_UPPER</code> \u2014 Keltner Channel Upper Band Trading Series","text":"<p>The <code>KC_UPPER</code> trading series represents the upper band of the Keltner Channel, based on a moving average and the Average True Range (ATR).</p> <p>It is built upon the Keltner Channel indicator implementation from the indicators module.</p>"},{"location":"dev/modules/trading_series/kc_upper/#parameters","title":"Parameters","text":"<pre><code>KC_UPPER(\n    ticker: str,\n    source: SourceType,\n    length: int = 20,\n    multiplier: int = 2,\n    use_exp_ma: bool = True,\n    atr_length: int = 10\n)\n</code></pre> <ul> <li><code>ticker</code> (<code>str</code>): Asset ticker symbol.</li> <li><code>source</code> (<code>SourceType</code>): Price source used for moving average. Default is <code>SourceType.CLOSE</code>. Supported sources are linked here.</li> <li><code>length</code> (<code>int</code>): Period for the moving average. Default is 20.</li> <li><code>multiplier</code> (<code>int</code>): Multiplier applied to ATR. Default is 2.</li> <li><code>use_exp_ma</code> (<code>bool</code>): Use EMA instead of SMA. Default is <code>True</code>.</li> <li><code>atr_length</code> (<code>int</code>): ATR lookback period. Default is 10.</li> </ul>"},{"location":"dev/modules/trading_series/kc_upper/#description","title":"Description","text":"<ul> <li>The upper Keltner Channel serves as a dynamic resistance level.</li> <li>The channel expands/contracts based on volatility via ATR.</li> </ul>"},{"location":"dev/modules/trading_series/kc_upper/#example-usage","title":"Example Usage","text":"<pre><code>KC_UPPER(\n    ticker=\"AAPL\",\n    source=SourceType.CLOSE,\n    length=20,\n    multiplier=2,\n    use_exp_ma=True,\n    atr_length=10\n)\n</code></pre>"},{"location":"dev/modules/trading_series/kst/","title":"<code>KST</code> \u2014 Know Sure Thing Oscillator Trading Series","text":"<p>The <code>KST</code> trading series represents the Know Sure Thing (KST) oscillator, a momentum indicator that sums smoothed rate of change values.</p> <p>It is built upon the Know Sure Thing indicator implementation from the indicators module.</p>"},{"location":"dev/modules/trading_series/kst/#parameters","title":"Parameters","text":"<pre><code>KST(\n    ticker: str,\n    source: SourceType,\n    roc_length_1: int,\n    roc_length_2: int,\n    roc_length_3: int,\n    roc_length_4: int,\n    sma_length_1: int,\n    sma_length_2: int,\n    sma_length_3: int,\n    sma_length_4: int\n)\n</code></pre> <ul> <li><code>ticker</code> (<code>str</code>): Asset ticker symbol.</li> <li><code>source</code> (<code>SourceType</code>): Price source for calculation. Default is <code>SourceType.CLOSE</code>. Supported sources are linked here.</li> <li><code>roc_length_1/2/3/4</code> (<code>int</code>): Rate of Change periods.</li> <li><code>sma_length_1/2/3/4</code> (<code>int</code>): SMA periods applied to each ROC.</li> </ul>"},{"location":"dev/modules/trading_series/kst/#description","title":"Description","text":"<ul> <li>Summation of four weighted smoothed ROC values.</li> <li>A smoother momentum oscillator designed to reduce noise.</li> </ul>"},{"location":"dev/modules/trading_series/kst/#example-usage","title":"Example Usage","text":"<pre><code>KST(\n    ticker=\"AAPL\",\n    source=SourceType.CLOSE,\n    roc_length_1=10,\n    roc_length_2=15,\n    roc_length_3=20,\n    roc_length_4=30,\n    sma_length_1=10,\n    sma_length_2=10,\n    sma_length_3=10,\n    sma_length_4=15\n)\n</code></pre>"},{"location":"dev/modules/trading_series/kst_signal/","title":"<code>KST_SIGNAL</code> \u2014 KST Signal Line Trading Series","text":"<p>The <code>KST_SIGNAL</code> trading series represents the signal line for the Know Sure Thing (KST) oscillator.</p> <p>It is built upon the Know Sure Thing Signal indicator implementation from the indicators module.</p>"},{"location":"dev/modules/trading_series/kst_signal/#parameters","title":"Parameters","text":"<pre><code>KST_SIGNAL(\n    ticker: str,\n    source: SourceType,\n    roc_length_1: int,\n    roc_length_2: int,\n    roc_length_3: int,\n    roc_length_4: int,\n    sma_length_1: int,\n    sma_length_2: int,\n    sma_length_3: int,\n    sma_length_4: int,\n    signal_length: int\n)\n</code></pre> <ul> <li><code>ticker</code> (<code>str</code>): Asset ticker symbol.</li> <li><code>source</code> (<code>SourceType</code>): Price source. Default is <code>SourceType.CLOSE</code>. Supported sources are linked here.</li> <li><code>roc_length_1/2/3/4</code> (<code>int</code>): ROC periods.</li> <li><code>sma_length_1/2/3/4</code> (<code>int</code>): SMA smoothing periods.</li> <li><code>signal_length</code> (<code>int</code>): Length for signal line smoothing.</li> </ul>"},{"location":"dev/modules/trading_series/kst_signal/#description","title":"Description","text":"<ul> <li>Smoothed version of KST for generating crossover buy/sell signals.</li> </ul>"},{"location":"dev/modules/trading_series/kst_signal/#example-usage","title":"Example Usage","text":"<pre><code>KST_SIGNAL(\n    ticker=\"AAPL\",\n    source=SourceType.CLOSE,\n    roc_length_1=10,\n    roc_length_2=15,\n    roc_length_3=20,\n    roc_length_4=30,\n    sma_length_1=10,\n    sma_length_2=10,\n    sma_length_3=10,\n    sma_length_4=15,\n    signal_length=9\n)\n</code></pre>"},{"location":"dev/modules/trading_series/ma/","title":"Moving Average Trading Series","text":"<p>This module provides two core types of moving averages used widely in technical analysis: Simple Moving Average (SMA) and Exponential Moving Average (EMA).</p>"},{"location":"dev/modules/trading_series/ma/#sma-simple-moving-average-trading-series","title":"<code>SMA</code> - Simple Moving Average Trading Series","text":"<p>The <code>SMA</code> trading series represents the Simple Moving Average, calculated as the unweighted mean of the previous <code>length</code> data points.</p>"},{"location":"dev/modules/trading_series/ma/#parameters","title":"Parameters","text":"<pre><code>SMA(\n    ticker: str,\n    source: SourceType = SourceType.CLOSE,\n    length: int = 20,\n    offset: int = 0\n)\n</code></pre> <ul> <li><code>ticker</code> (<code>str</code>): Asset ticker symbol (e.g., <code>\"AAPL\"</code>).</li> <li><code>source</code> (<code>SourceType</code>): Price source for calculation. Default is <code>SourceType.CLOSE</code>. Supported sources are linked here.</li> <li><code>length</code> (<code>int</code>): Lookback period for the average calculation. Default is 20.</li> <li><code>offset</code> (<code>int</code>): Shifts the series forward/backward. Default is 0.</li> </ul>"},{"location":"dev/modules/trading_series/ma/#description","title":"Description","text":"<ul> <li>SMA gives equal weight to all values.</li> <li>Smooths price data and is useful for trend identification.</li> </ul>"},{"location":"dev/modules/trading_series/ma/#example-usage","title":"Example Usage","text":"<pre><code>SMA(\n    ticker=\"AAPL\",\n    source=SourceType.CLOSE,\n    length=20,\n    offset=0\n)\n</code></pre>"},{"location":"dev/modules/trading_series/ma/#ema-exponential-moving-average-trading-series","title":"<code>EMA</code> - Exponential Moving Average Trading Series","text":"<p>The <code>EMA</code> trading series represents the Exponential Moving Average, which applies greater weight to more recent data points.</p>"},{"location":"dev/modules/trading_series/ma/#parameters_1","title":"Parameters","text":"<pre><code>EMA(\n    ticker: str,\n    source: SourceType = SourceType.CLOSE,\n    length: int = 20,\n    offset: int = 0\n)\n</code></pre> <ul> <li><code>ticker</code> (<code>str</code>): Asset ticker symbol.</li> <li><code>source</code> (<code>SourceType</code>): Price source for calculation. Default is <code>SourceType.CLOSE</code>. Supported sources are linked here.</li> <li><code>length</code> (<code>int</code>): Lookback period for calculation. Default is 20.</li> <li><code>offset</code> (<code>int</code>): Shifts the series forward/backward. Default is 0.</li> </ul>"},{"location":"dev/modules/trading_series/ma/#description_1","title":"Description","text":"<ul> <li>EMA reacts more quickly to recent price changes compared to SMA.</li> <li>Often used for dynamic trend-following strategies.</li> </ul>"},{"location":"dev/modules/trading_series/ma/#example-usage_1","title":"Example Usage","text":"<pre><code>EMA(\n    ticker=\"AAPL\",\n    source=SourceType.CLOSE,\n    length=20,\n    offset=0\n)\n</code></pre>"},{"location":"dev/modules/trading_series/macd/","title":"<code>MACD</code> \u2014 Moving Average Convergence Divergence Trading Series","text":"<p>The <code>MACD</code> trading series represents the classic MACD indicator, which shows the relationship between two moving averages of a security\u2019s price.</p> <p>It is built upon the MACD indicator implementation from the indicators module.</p>"},{"location":"dev/modules/trading_series/macd/#parameters","title":"Parameters","text":"<pre><code>MACD(\n    ticker: str,\n    source: SourceType = SourceType.CLOSE,\n    fast_length: int = 12,\n    slow_length: int = 26,\n    ma_type: SmoothingType = SmoothingType.EMA\n)\n</code></pre> <ul> <li><code>ticker</code> (<code>str</code>): Asset ticker symbol (e.g., <code>\"AAPL\"</code>).</li> <li><code>source</code> (<code>SourceType</code>): Price source for the calculation. Default is <code>SourceType.CLOSE</code>. Supported sources are linked here.</li> <li><code>fast_length</code> (<code>int</code>): Lookback for the fast moving average. Default is 12.</li> <li><code>slow_length</code> (<code>int</code>): Lookback for the slow moving average. Default is 26.</li> <li><code>ma_type</code> (<code>SmoothingType</code>): Type of moving average used. Default is <code>SmoothingType.EMA</code>. Supported types are linked here.</li> </ul>"},{"location":"dev/modules/trading_series/macd/#description","title":"Description","text":"<ul> <li>Shows the difference between a fast EMA and a slow EMA.</li> <li>Useful for identifying trend changes and momentum.</li> </ul>"},{"location":"dev/modules/trading_series/macd/#example-usage","title":"Example Usage","text":"<pre><code>MACD(\n    ticker=\"AAPL\",\n    source=SourceType.CLOSE,\n    fast_length=12,\n    slow_length=26,\n    ma_type=SmoothingType.EMA\n)\n</code></pre>"},{"location":"dev/modules/trading_series/macd_signal/","title":"<code>MACD_SIGNAL</code> \u2014 MACD Signal Line Trading Series","text":"<p>The <code>MACD_SIGNAL</code> trading series represents the signal line of the MACD indicator, which is typically a smoothed version of the MACD itself.</p> <p>It is built upon the MACD Signal indicator implementation from the indicators module.</p>"},{"location":"dev/modules/trading_series/macd_signal/#parameters","title":"Parameters","text":"<pre><code>MACD_SIGNAL(\n    ticker: str,\n    source: SourceType = SourceType.CLOSE,\n    fast_length: int = 12,\n    slow_length: int = 26,\n    oscillator_ma_type: SmoothingType = SmoothingType.EMA,\n    signal_ma_type: SmoothingType = SmoothingType.EMA,\n    signal_length: int = 9\n)\n</code></pre> <ul> <li><code>ticker</code> (<code>str</code>): Asset ticker symbol.</li> <li><code>source</code> (<code>SourceType</code>): Price source. Default is <code>SourceType.CLOSE</code>. Supported sources are linked here.</li> <li><code>fast_length</code> (<code>int</code>): Fast EMA length. Default is 12.</li> <li><code>slow_length</code> (<code>int</code>): Slow EMA length. Default is 26.</li> <li><code>oscillator_ma_type</code> (<code>SmoothingType</code>): MA type for the MACD oscillator. Default is <code>SmoothingType.EMA</code>. Supported types are linked here.</li> <li><code>signal_ma_type</code> (<code>SmoothingType</code>): MA type for the signal line. Default is <code>SmoothingType.EMA</code>. Supported types are linked here.</li> <li><code>signal_length</code> (<code>int</code>): Smoothing period for the signal line. Default is 9.</li> </ul>"},{"location":"dev/modules/trading_series/macd_signal/#description","title":"Description","text":"<ul> <li>Signal line helps generate buy/sell signals via crossovers with MACD.</li> </ul>"},{"location":"dev/modules/trading_series/macd_signal/#example-usage","title":"Example Usage","text":"<pre><code>MACD_SIGNAL(\n    ticker=\"AAPL\",\n    source=SourceType.CLOSE,\n    fast_length=12,\n    slow_length=26,\n    oscillator_ma_type=SmoothingType.EMA,\n    signal_ma_type=SmoothingType.EMA,\n    signal_length=9\n)\n</code></pre>"},{"location":"dev/modules/trading_series/mass/","title":"<code>MASS_INDEX</code> \u2014 Mass Index Trading Series","text":"<p>The <code>MASS_INDEX</code> trading series measures the range expansion between high and low prices to identify potential reversals.</p> <p>It is built upon the Mass Index indicator implementation from the indicators module.</p>"},{"location":"dev/modules/trading_series/mass/#parameters","title":"Parameters","text":"<pre><code>MASS_INDEX(\n    ticker: str,\n    length: int = 10\n)\n</code></pre> <ul> <li><code>ticker</code> (<code>str</code>): Asset ticker symbol.</li> <li><code>length</code> (<code>int</code>): Period for smoothing the range. Default is 10.</li> </ul>"},{"location":"dev/modules/trading_series/mass/#description","title":"Description","text":"<ul> <li>A Mass Index greater than 27 often signals a potential trend reversal.</li> <li>Uses a ratio of EMAs of the price range.</li> </ul>"},{"location":"dev/modules/trading_series/mass/#example-usage","title":"Example Usage","text":"<pre><code>MASS_INDEX(\n    ticker=\"AAPL\",\n    length=10\n)\n</code></pre>"},{"location":"dev/modules/trading_series/mfi/","title":"<code>MFI</code> \u2014 Money Flow Index Trading Series","text":"<p>The <code>MFI</code> trading series represents the Money Flow Index, a momentum indicator that uses price and volume to identify overbought or oversold conditions.</p> <p>It is built upon the Money Flow Index indicator implementation from the indicators module.</p>"},{"location":"dev/modules/trading_series/mfi/#parameters","title":"Parameters","text":"<pre><code>MFI(\n    ticker: str,\n    length: int = 14\n)\n</code></pre> <ul> <li><code>ticker</code> (<code>str</code>): Asset ticker symbol (e.g., <code>\"AAPL\"</code>).</li> <li><code>length</code> (<code>int</code>): Period for MFI calculation. Default is 14.</li> </ul>"},{"location":"dev/modules/trading_series/mfi/#description","title":"Description","text":"<ul> <li>MFI readings above 80 typically indicate overbought conditions.</li> <li>MFI readings below 20 typically indicate oversold conditions.</li> <li>Combines price and volume for momentum analysis.</li> </ul>"},{"location":"dev/modules/trading_series/mfi/#example-usage","title":"Example Usage","text":"<pre><code>MFI(\n    ticker=\"AAPL\",\n    length=14\n)\n</code></pre>"},{"location":"dev/modules/trading_series/momentum/","title":"<code>MOMENTUM</code> \u2014 Momentum Indicator Trading Series","text":"<p>The <code>MOMENTUM</code> trading series represents a simple momentum oscillator, calculating the difference between the current price and the price <code>length</code> periods ago.</p> <p>It is built upon the Momentum indicator implementation from the indicators module.</p>"},{"location":"dev/modules/trading_series/momentum/#parameters","title":"Parameters","text":"<pre><code>MOMENTUM(\n    ticker: str,\n    source: SourceType = SourceType.CLOSE,\n    length: int = 10\n)\n</code></pre> <ul> <li><code>ticker</code> (<code>str</code>): Asset ticker symbol (e.g., <code>\"AAPL\"</code>).</li> <li><code>source</code> (<code>SourceType</code>): Price source for calculation. Default is <code>SourceType.CLOSE</code>. Supported sources are linked here.</li> <li><code>length</code> (<code>int</code>): Lookback period for momentum calculation. Default is 10.</li> </ul>"},{"location":"dev/modules/trading_series/momentum/#description","title":"Description","text":"<ul> <li>Positive values indicate upward momentum.</li> <li>Negative values indicate downward momentum.</li> <li>Useful for identifying trend strength and direction.</li> </ul>"},{"location":"dev/modules/trading_series/momentum/#example-usage","title":"Example Usage","text":"<pre><code>MOMENTUM(\n    ticker=\"AAPL\",\n    source=SourceType.CLOSE,\n    length=10\n)\n</code></pre>"},{"location":"dev/modules/trading_series/obv/","title":"<code>OBV</code> \u2014 On Balance Volume Trading Series","text":"<p>The <code>OBV</code> trading series represents the On Balance Volume (OBV) indicator, which accumulates volume based on price direction to measure buying and selling pressure.</p> <p>It is built upon the On Balance Volume indicator implementation from the indicators module.</p>"},{"location":"dev/modules/trading_series/obv/#parameters","title":"Parameters","text":"<pre><code>OBV(\n    ticker: str\n)\n</code></pre> <ul> <li><code>ticker</code> (<code>str</code>): Asset ticker symbol.</li> </ul>"},{"location":"dev/modules/trading_series/obv/#description","title":"Description","text":"<ul> <li>OBV rises when price closes higher and volume is added.</li> <li>OBV falls when price closes lower and volume is subtracted.</li> <li>Helps confirm price trends based on volume flow.</li> </ul>"},{"location":"dev/modules/trading_series/obv/#example-usage","title":"Example Usage","text":"<pre><code>OBV(\n    ticker=\"AAPL\"\n)\n</code></pre>"},{"location":"dev/modules/trading_series/percent_d/","title":"<code>STOCH_PERCENT_D</code> \u2014 Stochastic %D Trading Series","text":"<p>The <code>STOCH_PERCENT_D</code> trading series represents the smoothed %D line of the Stochastic Oscillator.</p> <p>It is built upon the Stochastic Oscillator %D indicator implementation from the indicators module.</p>"},{"location":"dev/modules/trading_series/percent_d/#parameters","title":"Parameters","text":"<pre><code>STOCH_PERCENT_D(\n    ticker: str,\n    length: int = 14,\n    smoothing_length: int = 3\n)\n</code></pre> <ul> <li><code>ticker</code> (<code>str</code>): Asset ticker symbol.</li> <li><code>length</code> (<code>int</code>): Lookback period for the initial %K calculation. Default is 14.</li> <li><code>smoothing_length</code> (<code>int</code>): Smoothing period for %D calculation. Default is 3.</li> </ul>"},{"location":"dev/modules/trading_series/percent_d/#description","title":"Description","text":"<ul> <li>%D is a smoothed version of %K.</li> <li>Helps smooth out noise and identify crossover signals.</li> </ul>"},{"location":"dev/modules/trading_series/percent_d/#example-usage","title":"Example Usage","text":"<pre><code>STOCH_PERCENT_D(\n    ticker=\"AAPL\",\n    length=14,\n    smoothing_length=3\n)\n</code></pre>"},{"location":"dev/modules/trading_series/percent_k/","title":"<code>STOCH_PERCENT_K</code> \u2014 Stochastic %K Trading Series","text":"<p>The <code>STOCH_PERCENT_K</code> trading series represents the raw %K line of the Stochastic Oscillator, showing the current closing price relative to the high-low range over a set period.</p> <p>It is built upon the Stochastic Oscillator %K indicator implementation from the indicators module.</p>"},{"location":"dev/modules/trading_series/percent_k/#parameters","title":"Parameters","text":"<pre><code>STOCH_PERCENT_K(\n    ticker: str,\n    length: int = 14\n)\n</code></pre> <ul> <li><code>ticker</code> (<code>str</code>): Asset ticker symbol.</li> <li><code>length</code> (<code>int</code>): Lookback period for %K calculation. Default is 14.</li> </ul>"},{"location":"dev/modules/trading_series/percent_k/#description","title":"Description","text":"<ul> <li>%K shows the position of the close price relative to the high-low range.</li> <li>Often combined with %D to generate trading signals.</li> </ul>"},{"location":"dev/modules/trading_series/percent_k/#example-usage","title":"Example Usage","text":"<pre><code>STOCH_PERCENT_K(\n    ticker=\"AAPL\",\n    length=14\n)\n</code></pre>"},{"location":"dev/modules/trading_series/pvi/","title":"<code>PVI</code> \u2014 Positive Volume Index Trading Series","text":"<p>The <code>PVI</code> trading series represents the Positive Volume Index (PVI), which tracks price changes on days when volume increases.</p> <p>It is built upon the Positive Volume Index indicator implementation from the indicators module.</p>"},{"location":"dev/modules/trading_series/pvi/#parameters","title":"Parameters","text":"<pre><code>PVI(\n    ticker: str\n)\n</code></pre> <ul> <li><code>ticker</code> (<code>str</code>): Asset ticker symbol.</li> </ul>"},{"location":"dev/modules/trading_series/pvi/#description","title":"Description","text":"<ul> <li>Focuses on days when trading volume increases compared to the prior day.</li> <li>Helps identify bullish market activity driven by mass participation.</li> </ul>"},{"location":"dev/modules/trading_series/pvi/#example-usage","title":"Example Usage","text":"<pre><code>PVI(\n    ticker=\"AAPL\"\n)\n</code></pre>"},{"location":"dev/modules/trading_series/pvt/","title":"<code>PVT</code> \u2014 Price Volume Trend Trading Series","text":"<p>The <code>PVT</code> trading series represents the Price Volume Trend (PVT) indicator, which combines price change and volume to identify trend strength.</p> <p>It is built upon the Price Volume Trend indicator implementation from the indicators module.</p>"},{"location":"dev/modules/trading_series/pvt/#parameters","title":"Parameters","text":"<pre><code>PVT(\n    ticker: str\n)\n</code></pre> <ul> <li><code>ticker</code> (<code>str</code>): Asset ticker symbol.</li> </ul>"},{"location":"dev/modules/trading_series/pvt/#description","title":"Description","text":"<ul> <li>Accumulates volume based on proportional price changes.</li> <li>Used to confirm trends and possible reversals.</li> </ul>"},{"location":"dev/modules/trading_series/pvt/#example-usage","title":"Example Usage","text":"<pre><code>PVT(\n    ticker=\"AAPL\"\n)\n</code></pre>"},{"location":"dev/modules/trading_series/roc/","title":"<code>ROC</code> \u2014 Rate of Change Trading Series","text":"<p>The <code>ROC</code> trading series represents the Rate of Change (ROC) indicator, which measures the percentage change between the current price and the price <code>length</code> periods ago.</p> <p>It is built upon the Rate of Change indicator implementation from the indicators module.</p>"},{"location":"dev/modules/trading_series/roc/#parameters","title":"Parameters","text":"<pre><code>ROC(\n    ticker: str,\n    source: SourceType = SourceType.CLOSE,\n    length: int = 9\n)\n</code></pre> <ul> <li><code>ticker</code> (<code>str</code>): Asset ticker symbol (e.g., <code>\"AAPL\"</code>).</li> <li><code>source</code> (<code>SourceType</code>): Price source for calculation. Default is <code>SourceType.CLOSE</code>. Supported sources are linked here.</li> <li><code>length</code> (<code>int</code>): Lookback period for ROC calculation. Default is 9.</li> </ul>"},{"location":"dev/modules/trading_series/roc/#description","title":"Description","text":"<ul> <li>Positive ROC indicates upward momentum.</li> <li>Negative ROC indicates downward momentum.</li> <li>Useful for identifying momentum shifts and trend reversals.</li> </ul>"},{"location":"dev/modules/trading_series/roc/#example-usage","title":"Example Usage","text":"<pre><code>ROC(\n    ticker=\"AAPL\",\n    source=SourceType.CLOSE,\n    length=9\n)\n</code></pre>"},{"location":"dev/modules/trading_series/rsi/","title":"<code>RSI</code> \u2014 Relative Strength Index Trading Series","text":"<p>The <code>RSI</code> trading series represents the Relative Strength Index (RSI), a momentum oscillator that measures the speed and change of price movements.</p> <p>It is built upon the RSI indicator implementation from the indicators module.</p>"},{"location":"dev/modules/trading_series/rsi/#parameters","title":"Parameters","text":"<pre><code>RSI(\n    ticker: str,\n    source: SourceType = SourceType.CLOSE,\n    length: int = 14\n)\n</code></pre> <ul> <li><code>ticker</code> (<code>str</code>): Asset ticker symbol.</li> <li><code>source</code> (<code>SourceType</code>): Price source for calculation. Default is <code>SourceType.CLOSE</code>. Supported sources are linked here.</li> <li><code>length</code> (<code>int</code>): Lookback period for RSI calculation. Default is 14.</li> </ul>"},{"location":"dev/modules/trading_series/rsi/#description","title":"Description","text":"<ul> <li>RSI above 70 often indicates overbought conditions.</li> <li>RSI below 30 often indicates oversold conditions.</li> <li>Helps identify potential reversal points and trend strength.</li> </ul>"},{"location":"dev/modules/trading_series/rsi/#example-usage","title":"Example Usage","text":"<pre><code>RSI(\n    ticker=\"AAPL\",\n    source=SourceType.CLOSE,\n    length=14\n)\n</code></pre>"},{"location":"dev/modules/trading_series/trix/","title":"<code>TRIX</code> \u2014 Triple Exponential Average Trading Series","text":"<p>The <code>TRIX</code> trading series represents the TRIX indicator, which is a triple-smoothed Exponential Moving Average used to identify trends and momentum changes.</p> <p>It is built upon the Triple Exponential Average indicator implementation from the indicators module.</p>"},{"location":"dev/modules/trading_series/trix/#parameters","title":"Parameters","text":"<pre><code>TRIX(\n    ticker: str,\n    length: int = 18\n)\n</code></pre> <ul> <li><code>ticker</code> (<code>str</code>): Asset ticker symbol (e.g., <code>\"AAPL\"</code>).</li> <li><code>length</code> (<code>int</code>): Period for TRIX calculation. Default is 18.</li> </ul>"},{"location":"dev/modules/trading_series/trix/#description","title":"Description","text":"<ul> <li>Triple-smoothed EMA reduces market noise.</li> <li>TRIX crosses above 0 signal possible bullish trends, crosses below 0 signal bearish trends.</li> </ul>"},{"location":"dev/modules/trading_series/trix/#example-usage","title":"Example Usage","text":"<pre><code>TRIX(\n    ticker=\"AAPL\",\n    length=18\n)\n</code></pre>"},{"location":"dev/modules/trading_series/uo/","title":"<code>UO</code> \u2014 Ultimate Oscillator Trading Series","text":"<p>The <code>UO</code> trading series represents the Ultimate Oscillator (UO), which combines short, medium, and long-term price movements to avoid false divergence signals.</p> <p>It is built upon the Ultimate Oscillator indicator implementation from the indicators module.</p>"},{"location":"dev/modules/trading_series/uo/#parameters","title":"Parameters","text":"<pre><code>UO(\n    ticker: str,\n    fast_length: int = 7,\n    middle_length: int = 14,\n    slow_length: int = 28\n)\n</code></pre> <ul> <li><code>ticker</code> (<code>str</code>): Asset ticker symbol.</li> <li><code>fast_length</code> (<code>int</code>): Fastest period (default 7).</li> <li><code>middle_length</code> (<code>int</code>): Middle period (default 14).</li> <li><code>slow_length</code> (<code>int</code>): Slowest period (default 28).</li> </ul>"},{"location":"dev/modules/trading_series/uo/#description","title":"Description","text":"<ul> <li>Values above 70 suggest overbought conditions.</li> <li>Values below 30 suggest oversold conditions.</li> <li>Designed to improve divergence signal reliability compared to other oscillators.</li> </ul>"},{"location":"dev/modules/trading_series/uo/#example-usage","title":"Example Usage","text":"<pre><code>UO(\n    ticker=\"AAPL\",\n    fast_length=7,\n    middle_length=14,\n    slow_length=28\n)\n</code></pre>"},{"location":"dev/modules/trading_series/willr/","title":"<code>WILLR</code> \u2014 Williams %R Trading Series","text":"<p>The <code>WILLR</code> trading series represents Williams %R, a momentum indicator that measures overbought and oversold levels.</p> <p>It is built upon the Williams %R indicator implementation from the indicators module.</p>"},{"location":"dev/modules/trading_series/willr/#parameters","title":"Parameters","text":"<pre><code>WILLR(\n    ticker: str,\n    source: SourceType = SourceType.CLOSE,\n    length: int = 14\n)\n</code></pre> <ul> <li><code>ticker</code> (<code>str</code>): Asset ticker symbol.</li> <li><code>source</code> (<code>SourceType</code>): Price source for calculation. Default is <code>SourceType.CLOSE</code>. Supported sources are linked here.</li> <li><code>length</code> (<code>int</code>): Lookback period for the %R calculation. Default is 14.</li> </ul>"},{"location":"dev/modules/trading_series/willr/#description","title":"Description","text":"<ul> <li>Values near -20 suggest overbought conditions.</li> <li>Values near -80 suggest oversold conditions.</li> <li>Very similar in interpretation to the Stochastic Oscillator.</li> </ul>"},{"location":"dev/modules/trading_series/willr/#example-usage","title":"Example Usage","text":"<pre><code>WILLR(\n    ticker=\"AAPL\",\n    source=SourceType.CLOSE,\n    length=14\n)\n</code></pre>"}]}